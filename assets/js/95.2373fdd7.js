(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{529:function(s,t,a){"use strict";a.r(t);var n=a(11),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"浏览器如何执行javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#浏览器如何执行javascript"}},[s._v("#")]),s._v(" 浏览器如何执行JavaScript")]),s._v(" "),a("p",[a("code",[s._v("V8引擎")]),s._v(" 是 "),a("code",[s._v("Chrome")]),s._v(" 浏览器 "),a("code",[s._v("JavaScript")]),s._v(" 引擎，用来解释执行 "),a("code",[s._v("js")]),s._v(" 代码，我们常常提到执行环境、词法环境、作用域、执行上下文、闭包等内容，这些概念都是与 "),a("code",[s._v("JavaScript")]),s._v(" 引擎执行的过程有关")]),s._v(" "),a("h2",{attrs:{id:"javascript-代码运行的各个阶段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-代码运行的各个阶段"}},[s._v("#")]),s._v(" JavaScript 代码运行的各个阶段")]),s._v(" "),a("p",[a("code",[s._v("JavaScript")]),s._v(" 是弱类型语言，在运行时才能确定变量类型。即使是如今流行的 "),a("code",[s._v("TypeScript")]),s._v("，也只是增加了编译时（编译成 JavaScript）的类型检测（代码编译过程中编译器会进行词法分析、语法分析、语义分析、生成 AST 等处理）")]),s._v(" "),a("p",[s._v("同样，"),a("code",[s._v("JavaScript")]),s._v(" 引擎在执行 "),a("code",[s._v("JavaScript")]),s._v("代码时，会从上到下进行词法分析、语法分析、语义分析等处理，并在代码解析完成后生成 "),a("code",[s._v("AST")]),s._v("（抽象语法树），最终根据 "),a("code",[s._v("AST")]),s._v(" 生成 解释器可以执行的字节码或"),a("code",[s._v("CPU")]),s._v(" 执行的机器码。")]),s._v(" "),a("p",[s._v("这个过程，我们统一描述为语法分析阶段。除了语法分析阶段，"),a("code",[s._v("JavaScript")]),s._v(" 引擎在执行代码时还会进行其他的处理。以 V8 引擎为例，在 V8 引擎中 "),a("code",[s._v("JavaScript")]),s._v(" 代码的运行过程主要分成三个阶段。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("语法分析阶段。 该阶段会对代码进行语法分析，检查是否有语法错误（SyntaxError），如果发现语法错误，会在控制台抛出异常并终止执行。")])]),s._v(" "),a("li",[a("p",[s._v("编译阶段。 该阶段会进行执行上下文（Execution Context）的创建，包括创建变量对象、建立作用域链、确定 "),a("code",[s._v("this")]),s._v(" 的指向等。每进入一个不同的运行环境时，V8 引擎都会创建一个新的执行上下文。")])]),s._v(" "),a("li",[a("p",[s._v("执行阶段。 将编译阶段中创建的执行上下文压入调用栈，并成为正在运行的执行上下文，代码执行结束后，将其弹出调用栈。")])])]),s._v(" "),a("p",[a("code",[s._v("JavaScript")]),s._v(" 执行分为编译和执行两个过程。其中，语法分析阶段属于编译器编译过程。上面提到的执行环境、词法环境、作用域、执行上下文等内容都是在编译和执行阶段中产生的概念。")]),s._v(" "),a("h3",{attrs:{id:"编译"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编译"}},[s._v("#")]),s._v(" 编译")]),s._v(" "),a("p",[s._v("以 "),a("code",[s._v("var a = 2;")]),s._v(" 为例，"),a("code",[s._v("javascript")]),s._v(" 的内部编译过程，主要包括以下三步：")]),s._v(" "),a("h4",{attrs:{id:"语法分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法分析"}},[s._v("#")]),s._v(" 语法分析")]),s._v(" "),a("p",[s._v("把由字符组成的字符串分解成有意义的代码块，这些代码块被称为词法单元(token)")]),s._v(" "),a("p",[a("code",[s._v("var a = 2;")]),s._v(" 被分解成为下面这些词法单元：var、a、=、2、;。这些词法单元组成了一个词法单元流数组")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 词法分析后的结果")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"var"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"keyword"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"identifier"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"="')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"assignment"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),s._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"integer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('";"')]),s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"eos"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("end "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" statement"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h4",{attrs:{id:"解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析"}},[s._v("#")]),s._v(" 解析")]),s._v(" "),a("p",[s._v("把词法单元流数组转换成一个由元素逐级嵌套所组成的代表程序语法结构的树，这个树被称为“抽象语法树” (Abstract Syntax Tree, AST)")]),s._v(" "),a("p",[a("code",[s._v("var a = 2;")]),s._v(" 的抽象语法树中有一个叫 "),a("code",[s._v("VariableDeclaration")]),s._v(" 的顶级节点，接下来是一个叫 "),a("code",[s._v("Identifier")]),s._v(" (它的值是a)的子节点，以及一个叫"),a("code",[s._v("AssignmentExpression")]),s._v(" 的子节点，且该节点有一个叫 "),a("code",[s._v("Numericliteral")]),s._v("(它的值是2)的子节点")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  operation"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"="')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  left"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    keyword"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"var"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    right"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  right"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("h4",{attrs:{id:"代码生成"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码生成"}},[s._v("#")]),s._v(" 代码生成")]),s._v(" "),a("p",[s._v("将 "),a("code",[s._v("AST")]),s._v(" 转换为可执行代码的过程被称为代码生成")]),s._v(" "),a("p",[a("code",[s._v("var a=2;")]),s._v(" 的抽象语法树转为一组机器指令，用来创建一个叫作 "),a("code",[s._v("a")]),s._v(" 的变量(包括分配内存等)，并将值 "),a("code",[s._v("2")]),s._v(" 储存在 "),a("code",[s._v("a")]),s._v(" 中")]),s._v(" "),a("p",[s._v("实际上，"),a("code",[s._v("javascript")]),s._v(" 引擎的编译过程要复杂得多，包括大量优化操作，上面的三个步骤是编译过程的基本概述")]),s._v(" "),a("p",[s._v("任何代码片段在执行前都要进行编译，大部分情况下编译发生在代码执行前的几微秒。"),a("code",[s._v("javascript")]),s._v(" 编译器首先会对 "),a("code",[s._v("var a=2;")]),s._v(" 这段程序进行编译，然后做好执行它的准备，并且通常马上就会执行它")]),s._v(" "),a("h3",{attrs:{id:"执行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行"}},[s._v("#")]),s._v(" 执行")]),s._v(" "),a("p",[s._v("简而言之，编译过程就是编译器把程序分解成词法单元(token)，然后把词法单元解析成语法树(AST)，再把语法树变成机器指令等待执行的过程")]),s._v(" "),a("p",[s._v("实际上，代码进行编译，还要执行。下面以 "),a("code",[s._v("var a = 2;")]),s._v(" 为例，深入说明编译和执行过程")]),s._v(" "),a("p",[a("strong",[s._v("【1】编译")])]),s._v(" "),a("p",[s._v("1、编译器查找作用域是否已经有一个名称为 "),a("code",[s._v("a")]),s._v(" 的变量存在于同一个作用域的集合中。如果是，编译器会忽略该声明，继续进行编译；否则它会要求作用域在当前作用域的集合中声明一个新的变量，并命名为 "),a("code",[s._v("a")])]),s._v(" "),a("p",[s._v("2、编译器将 "),a("code",[s._v("var a = 2;")]),s._v(" 这个代码片段编译成用于执行的机器指令")]),s._v(" "),a("p",[s._v("[注意]依据编译器的编译原理，"),a("code",[s._v("javascript")]),s._v(" 中的重复声明是合法的")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//test在作用域中首次出现，所以声明新变量，并将20赋值给test")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" test "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//test在作用域中已经存在，直接使用，将20的赋值替换成30")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" test "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("【2】执行")])]),s._v(" "),a("p",[s._v("1、引擎运行时会首先查询作用域，在当前的作用域集合中是否存在一个叫作 "),a("code",[s._v("a")]),s._v(" 的变量。如果是，引擎就会使用这个变量；如果否，引擎会继续查找该变量")]),s._v(" "),a("p",[s._v("2、如果引擎最终找到了变量 "),a("code",[s._v("a")]),s._v("，就会将2赋值给它。否则引擎会抛出一个异常")]),s._v(" "),a("h4",{attrs:{id:"查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询"}},[s._v("#")]),s._v(" 查询")]),s._v(" "),a("p",[s._v("在引擎执行的第一步操作中，对变量 "),a("code",[s._v("a")]),s._v(" 进行了查询，这种查询叫做 "),a("code",[s._v("LHS")]),s._v(" 查询。实际上，引擎查询共分为两种："),a("code",[s._v("LHS")]),s._v(" 查询和 "),a("code",[s._v("RHS")]),s._v(" 查询")]),s._v(" "),a("p",[s._v("从字面意思去理解，当变量出现在赋值操作的左侧时进行 "),a("code",[s._v("LHS")]),s._v(" 查询，出现在右侧时进行 "),a("code",[s._v("RHS")]),s._v(" 查询")]),s._v(" "),a("p",[s._v("更准确地讲，"),a("code",[s._v("RHS")]),s._v(" 查询与简单地查找某个变量的值没什么区别，而 "),a("code",[s._v("LHS")]),s._v(" 查询则是试图找到变量的容器本身，从而可以对其赋值")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//2")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这段代码中，总共包括4个查询，分别是：")]),s._v(" "),a("p",[s._v("1、"),a("code",[s._v("foo(...)")]),s._v(" 对 "),a("code",[s._v("foo")]),s._v(" 进行了 "),a("code",[s._v("RHS")]),s._v(" 引用")]),s._v(" "),a("p",[s._v("2、函数传参 "),a("code",[s._v("a = 2")]),s._v(" 对 "),a("code",[s._v("a")]),s._v(" 进行了 "),a("code",[s._v("LHS")]),s._v(" 引用")]),s._v(" "),a("p",[s._v("3、"),a("code",[s._v("console.log(...)")]),s._v(" 对 "),a("code",[s._v("console")]),s._v(" 对象进行了 "),a("code",[s._v("RHS")]),s._v(" 引用，并检查其是否有一个 "),a("code",[s._v("log")]),s._v(" 的方法")]),s._v(" "),a("p",[s._v("4、"),a("code",[s._v("console.log(a)")]),s._v(" 对 "),a("code",[s._v("a")]),s._v(" 进行了 "),a("code",[s._v("RHS")]),s._v(" 引用，并把得到的值传给了 "),a("code",[s._v("console.log(...)")])]),s._v(" "),a("p",[a("strong",[s._v("嵌套")])]),s._v(" "),a("p",[s._v("在当前作用域中无法找到某个变量时，引擎就会在外层嵌套的作用域中继续查找，直到找到该变量，或抵达最外层的作用域（也就是全局作用域）为止")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 4")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("在代码片段中，作用域 "),a("code",[s._v("foo()")]),s._v(" 函数嵌套在全局作用域中。引擎首先在 "),a("code",[s._v("foo()")]),s._v(" 函数的作用域中查找变量 "),a("code",[s._v("b")]),s._v("，并尝试对其进行 "),a("code",[s._v("RHS")]),s._v(" 引用，没有找到；接着，引擎在全局作用域中查找 "),a("code",[s._v("b")]),s._v("，成功找到后，对其进行 "),a("code",[s._v("RHS")]),s._v(" 引用，将 "),a("code",[s._v("2")]),s._v(" 赋值给 "),a("code",[s._v("b")])]),s._v(" "),a("p",[a("strong",[s._v("异常")])]),s._v(" "),a("p",[s._v("为什么区分 "),a("code",[s._v("LHS")]),s._v(" 和 "),a("code",[s._v("RHS")]),s._v(" 是一件重要的事情？因为在变量还没有声明（在任何作用域中都无法找到变量）的情况下，这两种查询的行为不一样")]),s._v(" "),a("p",[a("strong",[s._v("RHS")])]),s._v(" "),a("p",[s._v("【1】如果 "),a("code",[s._v("RHS")]),s._v(" 查询失败，引擎会抛出 "),a("code",[s._v("ReferenceError(引用错误)")]),s._v(" 异常")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//对b进行RHS查询时，无法找到该变量。也就是说，这是一个“未声明”的变量")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//ReferenceError: b is not defined")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("【2】如果 "),a("code",[s._v("RHS")]),s._v(" 查询找到了一个变量，但尝试对变量的值进行不合理操作，比如对一个非函数类型值进行函数调用，或者引用"),a("code",[s._v("null")]),s._v(" 或 "),a("code",[s._v("undefined")]),s._v(" 中的属性，引擎会抛出另外一种类型异常："),a("code",[s._v("TypeError")]),s._v(" (类型错误)异常")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//TypeError: b is not a function")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[a("strong",[s._v("LHS")])]),s._v(" "),a("p",[s._v("【1】当引擎执行 "),a("code",[s._v("LHS")]),s._v(" 查询时，如果无法找到变量，全局作用域会创建一个具有该名称的变量，并将其返还给引擎")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("【2】如果在严格模式中 "),a("code",[s._v("LHS")]),s._v(" 查询失败时，并不会创建并返回一个全局变量，引擎会抛出同 "),a("code",[s._v("RHS")]),s._v(" 查询失败时类似的ReferenceError异常")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'use strict'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//ReferenceError: a is not defined")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"执行上下文的创建"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文的创建"}},[s._v("#")]),s._v(" 执行上下文的创建")]),s._v(" "),a("p",[s._v("执行上下文的创建离不开 "),a("code",[s._v("JavaScript")]),s._v(" 的运行环境，"),a("code",[s._v("JavaScript")]),s._v(" 运行环境包括全局环境、函数环境和 "),a("code",[s._v("eval")]),s._v("，其中全局环境和函数环境的创建过程如下：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("1、第一次载入 "),a("code",[s._v("JavaScript")]),s._v(" 代码时，首先会创建一个全局环境。全局环境位于最外层，直到应用程序退出后（例如关闭浏览器和网页）才会被销毁。")])]),s._v(" "),a("li",[a("p",[s._v("2、每个函数都有自己的运行环境，当函数被调用时，则会进入该函数的运行环境。当该环境中的代码被全部执行完毕后，该环境会被销毁。不同的函数运行环境不一样，即使是同一个函数，在被多次调用时也会创建多个不同的函数环境。")])])]),s._v(" "),a("p",[s._v("在不同的运行环境中，变量和函数可访问的其他数据范围不同，环境的行为（比如创建和销毁）也有所区别。而每进入一个不同的运行环境时，"),a("code",[s._v("JavaScript")]),s._v(" 都会创建一个新的执行上下文，该过程包括：")]),s._v(" "),a("ul",[a("li",[s._v("创建变量对象（Variable Object，简称 VO）；")]),s._v(" "),a("li",[s._v("建立作用域链（Scope Chain）；")]),s._v(" "),a("li",[s._v("确定 "),a("code",[s._v("this")]),s._v(" 的指向。")])]),s._v(" "),a("p",[s._v("由于建立作用域链过程中会涉及变量对象的概念，因此我们先来看看变量对象的创建，再看建立作用域链和确定 this 的指向。")]),s._v(" "),a("h3",{attrs:{id:"创建变量对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#创建变量对象"}},[s._v("#")]),s._v(" 创建变量对象")]),s._v(" "),a("p",[s._v("什么是变量对象呢？每个执行上下文都会有一个关联的变量对象，该对象上会保存这个上下文中定义的所有变量和函数。")]),s._v(" "),a("p",[s._v("而在浏览器中，全局环境的变量对象是 "),a("code",[s._v("window")]),s._v(" 对象，因此所有的全局变量和函数都是作为 "),a("code",[s._v("window")]),s._v(" 对象的属性和方法创建的。相应的，在 "),a("code",[s._v("Node")]),s._v(" 中全局环境的变量对象则是 "),a("code",[s._v("global")]),s._v(" 对象。")]),s._v(" "),a("p",[s._v("了解了什么是变量对象之后，我们来看下创建变量对象的过程。创建变量对象将会创建 "),a("code",[s._v("arguments")]),s._v(" 对象（仅函数环境下），同时会检查当前上下文的函数声明和变量声明。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("对于变量声明：此时会给变量分配内存，并将其初始化为 "),a("code",[s._v("undefined")]),s._v("（该过程只进行定义声明，执行阶段才执行赋值语句）。")])]),s._v(" "),a("li",[a("p",[s._v("对于函数声明：此时会在内存里创建函数对象，并且直接初始化为该函数对象。")])])]),s._v(" "),a("p",[s._v("上述变量声明和函数声明的处理过程，便是我们常说的变量提升和函数提升，其中函数声明提升会优先于变量声明提升。因为变量提升容易带来变量在预期外被覆盖掉的问题，同时还可能导致本应该被销毁的变量没有被销毁等情况。因此 ES6 中引入了 "),a("code",[s._v("let")]),s._v(" 和 "),a("code",[s._v("const")]),s._v(" 关键字，从而使 "),a("code",[s._v("JavaScript")]),s._v(" 也拥有了块级作用域。")]),s._v(" "),a("p",[s._v("或许你会感到疑惑，"),a("code",[s._v("JavaScript")]),s._v(" 是怎么支持块级作用域的呢？这就涉及作用域的概念。")]),s._v(" "),a("p",[s._v("在各类编程语言中，作用域分为静态作用域和动态作用域。"),a("code",[s._v("JavaScript")]),s._v(" 采用的是词法作用域（Lexical Scoping），也就是静态作用域。词法作用域中的变量，在编译过程中会产生一个确定的作用域。")]),s._v(" "),a("p",[s._v("到这里，或许对词法作用域、作用域、执行上下文、词法环境之间的关系依然感到混乱，接下来梳理下。")]),s._v(" "),a("p",[s._v("刚刚说到，词法作用域中的变量，在编译过程中会产生一个确定的作用域，这个作用域即当前的执行上下文，在 "),a("code",[s._v("ES5")]),s._v(" 后我们使用词法环境（Lexical Environment）替代作用域来描述该执行上下文。因此，词法环境可理解为我们常说的作用域，同样也指当前的执行上下文（注意，是当前的执行上下文）。")]),s._v(" "),a("p",[s._v("在 JavaScript 中，词法环境又分为词法环境（Lexical Environment）和变量环境（Variable Environment）两种，其中：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("变量环境用来记录 "),a("code",[s._v("var/function")]),s._v(" 等变量声明；")])]),s._v(" "),a("li",[a("p",[s._v("词法环境是用来记录 "),a("code",[s._v("let/const/class")]),s._v(" 等变量声明。")])])]),s._v(" "),a("p",[s._v("也就是说，创建变量过程中会进行函数提升和变量提升，"),a("code",[s._v("JavaScript")]),s._v(" 会通过词法环境来记录函数和变量声明。通过使用两个词法环境（而不是一个）分别记录不同的变量声明内容，"),a("code",[s._v("JavaScript")]),s._v(" 实现了支持块级作用域的同时，不影响原有的变量声明和函数声明。")]),s._v(" "),a("p",[s._v("这就是创建变量的过程，它属于执行上下文创建中的一环。创建变量的过程会产生作用域，作用域也被称为词法环境，那词法环境是由什么组成的呢？下面我结合作用域链的建立过程一起来进行分析。")]),s._v(" "),a("h3",{attrs:{id:"建立作用域链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#建立作用域链"}},[s._v("#")]),s._v(" 建立作用域链")]),s._v(" "),a("p",[s._v("作用域链，顾名思义，就是将各个作用域通过某种方式连接在一起。")]),s._v(" "),a("p",[s._v("前面说过，作用域就是词法环境，而词法环境由两个成员组成。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("环境记录（Environment Record）：用于记录自身词法环境中的变量对象。")])]),s._v(" "),a("li",[a("p",[s._v("外部词法环境引用（Outer Lexical Environment）：记录外层词法环境的引用。")])])]),s._v(" "),a("p",[s._v("通过外部词法环境的引用，作用域可以层层拓展，建立起从里到外延伸的一条作用域链。当某个变量无法在自身词法环境记录中找到时，可以根据外部词法环境引用向外层进行寻找，直到最外层的词法环境中外部词法环境引用为 "),a("code",[s._v("null")]),s._v("，这便是作用域链的变量查询。")]),s._v(" "),a("p",[s._v("那么，这个外部词法环境引用又是怎样指向外层呢？我们来看看 "),a("code",[s._v("JavaScript")]),s._v(" 中是如何通过外部词法环境引用来创建作用域的。")]),s._v(" "),a("p",[s._v("为了方便描述，我们将 "),a("code",[s._v("JavaScript")]),s._v(" 代码运行过程分为定义期和执行期，前面提到的编译阶段则属于定义期。")]),s._v(" "),a("p",[s._v("来看一个例子，我们定义了全局函数 "),a("code",[s._v("foo")]),s._v("，并在该函数中定义了函数 "),a("code",[s._v("bar")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("前面我们说到，"),a("code",[s._v("JavaScript")]),s._v(" 使用的是静态作用域，因此函数的作用域在定义期已经决定了。在上面的例子中，全局函数 "),a("code",[s._v("foo")]),s._v(" 创建了一个 "),a("code",[s._v("foo")]),s._v(" 的 "),a("code",[s._v("[[scope]]")]),s._v(" 属性，包含了全局 "),a("code",[s._v("[[scope]]")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("scope"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("globalContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("而当我们执行 "),a("code",[s._v("foo()")]),s._v(" 时，也会分别进入 "),a("code",[s._v("foo")]),s._v(" 函数的定义期和执行期。")]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("foo")]),s._v(" 函数的定义期时，函数 "),a("code",[s._v("bar")]),s._v(" 的 "),a("code",[s._v("[[scope]]")]),s._v(" 将会包含全局 "),a("code",[s._v("[[scope]]")]),s._v(" 和 "),a("code",[s._v("foo")]),s._v(" 的 "),a("code",[s._v("[[scope]]")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("scope"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("fooContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" globalContext"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("运行上述代码，我们可以在控制台看到符合预期的输出：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/Cgp9HWB1uyGAAaZseIAAK9qHI3wvE362.png",alt:"图片2.png"}})]),s._v(" "),a("p",[s._v("可以看到：")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("foo")]),s._v(" 的 "),a("code",[s._v("[[scope]]")]),s._v(" 属性包含了全局 "),a("code",[s._v("[[scope]]")])])]),s._v(" "),a("li",[a("p",[a("code",[s._v("bar")]),s._v(" 的 "),a("code",[s._v("[[scope]]")]),s._v(" 将会包含全局 "),a("code",[s._v("[[scope]]")]),s._v(" 和 "),a("code",[s._v("foo")]),s._v(" 的 "),a("code",[s._v("[[scope]]")])])])]),s._v(" "),a("p",[s._v("也就是说，"),a("code",[s._v("JavaScript")]),s._v(" 会通过外部词法环境引用来创建变量对象的一个作用域链，从而保证对执行环境有权访问的变量和函数的有序访问。除了创建作用域链之外，在这个过程中还会对创建的变量对象做一些处理。")]),s._v(" "),a("p",[s._v("前面我们说过，编译阶段会进行变量对象（VO）的创建，该过程会进行函数声明和变量声明，这时候变量的值被初始化为 "),a("code",[s._v("undefined")]),s._v("。在代码进入执行阶段之后，"),a("code",[s._v("JavaScript")]),s._v(" 会对变量进行赋值，此时变量对象会转为活动对象（Active Object，简称 AO），转换后的活动对象才可被访问，这就是 "),a("code",[s._v("VO -> AO")]),s._v(" 的过程。")]),s._v(" "),a("p",[s._v("为了更好地理解这个过程，我们来看个例子，我们在 "),a("code",[s._v("foo")]),s._v(" 函数中定义了变量 "),a("code",[s._v("b")]),s._v("、函数 "),a("code",[s._v("c")]),s._v(" 和函数表达式变量"),a("code",[s._v("d")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("d")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n​\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("在执行 "),a("code",[s._v("foo(1)")]),s._v(" 时，首先进入定义期，此时：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("参数变量 "),a("code",[s._v("a")]),s._v(" 的值为 1")])]),s._v(" "),a("li",[a("p",[s._v("变量 "),a("code",[s._v("b")]),s._v(" 和 "),a("code",[s._v("d")]),s._v(" 初始化为 "),a("code",[s._v("undefined")])])]),s._v(" "),a("li",[a("p",[s._v("函数 "),a("code",[s._v("c")]),s._v(" 创建函数并初始化")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AO")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  arguments"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    length"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  c"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" reference to "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  d"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("前面我们也有提到，进入执行期之后，会执行赋值语句进行赋值，此时变量 "),a("code",[s._v("b")]),s._v(" 和 "),a("code",[s._v("d")]),s._v(" 会被赋值为 "),a("code",[s._v("2")]),s._v(" 和函数表达式：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AO")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n   arguments"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    length"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  a"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  b"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  c"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" reference to "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  d"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" reference to FunctionExpression "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"d"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("这就是 "),a("code",[s._v("VO -> AO")]),s._v(" 过程。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("在定义期（编译阶段）：该对象值仍为 "),a("code",[s._v("undefined")]),s._v("，且处于不可访问的状态。")])]),s._v(" "),a("li",[a("p",[s._v("进入执行期（执行阶段）："),a("code",[s._v("VO")]),s._v(" 被激活，其中变量属性会进行赋值。")])])]),s._v(" "),a("p",[s._v("实际上在执行的时候，除了 "),a("code",[s._v("VO")]),s._v(" 被激活，活动对象还会添加函数执行时传入的参数和 "),a("code",[s._v("arguments")]),s._v(" 这个特殊对象，因此 "),a("code",[s._v("AO")]),s._v(" 和 "),a("code",[s._v("VO")]),s._v(" 的关系可以用以下关系来表达：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("AO")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("VO")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" parameters "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" arguments\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("现在，我们知道作用域链是在进入代码的执行阶段时，通过外部词法环境引用来创建的。总结如下：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("在编译阶段，"),a("code",[s._v("JavaScript")]),s._v(" 在创建执行上下文的时候会先创建变量对象（VO）；")])]),s._v(" "),a("li",[a("p",[s._v("在执行阶段，变量对象（VO）被激活为活动对象（ AO），函数内部的变量对象通过外部词法环境的引用创建作用域链。")])])]),s._v(" "),a("p",[s._v("虽然 "),a("code",[s._v("JavaScript")]),s._v(" 代码的运行过程可以分为 "),a("strong",[s._v("语法分析阶段")]),s._v("、"),a("strong",[s._v("编译阶段")]),s._v("和"),a("strong",[s._v("执行阶段")]),s._v("，但由于在 "),a("code",[s._v("JavaScript")]),s._v(" 引擎中是通过调用栈的方式来执行 "),a("code",[s._v("JavaScript")]),s._v(" 代码的，因此并不存在“整个 "),a("code",[s._v("JavaScript")]),s._v(" 运行过程只会在某个阶段中”这一说法，比如上面例子中 "),a("code",[s._v("bar")]),s._v(" 函数的编译阶段，其实是在 "),a("code",[s._v("foo")]),s._v(" 函数的执行阶段中。")]),s._v(" "),a("p",[s._v("一般来说，当函数执行结束之后，执行期上下文将被销毁（作用域链和活动对象均被销毁）。但有时候我们想要保留其中一些变量对象，不想被销毁，此时就会使用到 "),a("strong",[s._v("闭包")])]),s._v(" "),a("p",[s._v("我们已经知道，通过作用域链，我们可以在函数内部可以直接读取外部以及全局变量，但外部环境是无法访问内部函数里的变量。比如下面的例子中，"),a("code",[s._v("foo")]),s._v(" 函数中定义了变量 "),a("code",[s._v("a")]),s._v("：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// undefined")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("我们在全局环境下无法访问函数 "),a("code",[s._v("foo")]),s._v(" 中的变量 "),a("code",[s._v("a")]),s._v("，这是因为全局函数的作用域链里，不含有函数 "),a("code",[s._v("foo")]),s._v(" 内的作用域。")]),s._v(" "),a("p",[s._v("如果我们想要访问内部函数的变量，可以通过函数 "),a("code",[s._v("foo")]),s._v(" 中的函数 "),a("code",[s._v("bar")]),s._v(" 返回变量 "),a("code",[s._v("a")]),s._v("，并将函数 "),a("code",[s._v("bar")]),s._v(" 返回，这样我们在全局环境中也可以通过调用函数 "),a("code",[s._v("foo")]),s._v(" 返回的函数 "),a("code",[s._v("bar")]),s._v("，来访问变量 "),a("code",[s._v("a")]),s._v(" ：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("前面我们说到，当函数执行结束之后，执行期上下文将被销毁，其中包括作用域链和激活对象。那么，在这个例子中，当 "),a("code",[s._v("b()")]),s._v(" 执行时，"),a("code",[s._v("foo")]),s._v(" 函数上下文包括作用域都已经被销毁了，为什么 "),a("code",[s._v("foo")]),s._v(" 作用域下的 "),a("code",[s._v("a")]),s._v(" 依然可以被访问到呢？")]),s._v(" "),a("p",[s._v("这是因为 "),a("code",[s._v("bar")]),s._v(" 函数引用了 "),a("code",[s._v("foo")]),s._v(" 函数变量对象中的值，此时即使创建 "),a("code",[s._v("bar")]),s._v(" 函数的 "),a("code",[s._v("foo")]),s._v(" 函数执行上下文被销毁了，但它的变量对象依然会保留在 "),a("code",[s._v("JavaScript")]),s._v(" 内存中，"),a("code",[s._v("bar")]),s._v(" 函数依然可以通过 "),a("code",[s._v("bar")]),s._v(" 函数的作用域链找到它，并进行访问。这便是我们常说的闭包，即使创建它的上下文已经销毁，它仍然被保留在内存中。")]),s._v(" "),a("p",[s._v("闭包使得我们可以从外部读取局部变量，在大多数项目中都会被使用到，常见的用途包括：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("用于从外部读取其他函数内部变量的函数；")])]),s._v(" "),a("li",[a("p",[s._v("可以使用闭包来模拟私有方法；")])]),s._v(" "),a("li",[a("p",[s._v("让这些变量的值始终保持在内存中。")])])]),s._v(" "),a("p",[s._v("需要注意的是，我们在使用闭包的时候，需要及时清理不再使用到的变量，否则可能导致内存泄漏问题。")]),s._v(" "),a("p",[s._v("相信大家现在已经掌握了作用域链的建立过程，那么作用域链的用途想必大家也已经了解，比如在函数执行过程中变量的解析：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("从当前词法环境开始，沿着作用域链逐级向外层寻找环境记录，直到找到同名变量为止；")])]),s._v(" "),a("li",[a("p",[s._v("找到后不再继续遍历，找不到就报错。")])])]),s._v(" "),a("p",[s._v("下面我们继续来看，执行上下文的创建过程中还会做的一件事：确定 "),a("code",[s._v("this")]),s._v(" 的指向。")]),s._v(" "),a("h3",{attrs:{id:"确定-this-的指向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#确定-this-的指向"}},[s._v("#")]),s._v(" 确定 this 的指向")]),s._v(" "),a("p",[s._v("在 "),a("code",[s._v("JavaScript")]),s._v(" 中，"),a("code",[s._v("this")]),s._v(" 指向执行当前代码对象的所有者，可简单理解为 "),a("code",[s._v("this")]),s._v(" 指向最后调用当前代码的那个对象。相信大家都很熟悉 "),a("code",[s._v("this")]),s._v("，因此这里我就进行结论性的简单总结。")]),s._v(" "),a("p",[s._v("根据 "),a("code",[s._v("JavaScript")]),s._v(" 中函数的调用方式不同，this的指向分为以下情况。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_16267850442886.png",alt:"img"}})]),s._v(" "),a("ul",[a("li",[a("p",[s._v("在全局环境中，"),a("code",[s._v("this")]),s._v(" 指向全局对象（在浏览器中为 "),a("code",[s._v("window")]),s._v("）")])]),s._v(" "),a("li",[a("p",[s._v("在函数内部，"),a("code",[s._v("this")]),s._v(" 的值取决于函数被调用的方式")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("函数作为对象的方法被调用，"),a("code",[s._v("this")]),s._v(" 指向调用这个方法的对象")])]),s._v(" "),a("li",[a("p",[s._v("函数用作构造函数时（使用"),a("code",[s._v("new")]),s._v(" 关键字），它的 "),a("code",[s._v("this")]),s._v(" 被绑定到正在构造的新对象")])]),s._v(" "),a("li",[a("p",[s._v("在类的构造函数中，"),a("code",[s._v("this")]),s._v(" 是一个常规对象，类中所有非静态的方法都会被添加到 "),a("code",[s._v("this")]),s._v(" 的原型中")])])])]),s._v(" "),a("li",[a("p",[s._v("在箭头函数中，"),a("code",[s._v("this")]),s._v(" 指向它被创建时的环境")])]),s._v(" "),a("li",[a("p",[s._v("使用 "),a("code",[s._v("apply")]),s._v("、"),a("code",[s._v("call")]),s._v("、"),a("code",[s._v("bind")]),s._v(" 等方式调用：根据 "),a("code",[s._v("API")]),s._v(" 不同，可切换函数执行的上下文环境，即 "),a("code",[s._v("this")]),s._v(" 绑定的对象")])])]),s._v(" "),a("p",[s._v("可以看到，"),a("code",[s._v("this")]),s._v(" 在不同的情况下会有不同的指向，在 "),a("code",[s._v("ES6")]),s._v(" 箭头函数还没出现之前，为了能正确获取某个运行环境下 "),a("code",[s._v("this")]),s._v(" 对象，我们常常会使用 "),a("code",[s._v("var that = this;、var self = this;")]),s._v(" 这样的代码将变量分配给 "),a("code",[s._v("this")]),s._v("，便于使用。这种方式降低了代码可读性，因此如今这种做法不再被提倡，通过正确使用箭头函数，我们可以更好地管理作用域。")]),s._v(" "),a("p",[s._v("到这里，围绕 "),a("code",[s._v("JavaScript")]),s._v(" 的编译阶段和执行阶段中执行上下文创建相关的内容已经介绍完毕。")]),s._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[a("code",[s._v("JavaScript")]),s._v(" 代码的运行过程，分为语法分析阶段、编译阶段、执行阶段三个阶段。")]),s._v(" "),a("p",[s._v("在编译阶段，"),a("code",[s._v("JavaScript")]),s._v(" 会进行执行上下文的创建，包括：")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("创建变量对象，进行变量声明和函数声明，此时会产生变量提升和函数提升；")])]),s._v(" "),a("li",[a("p",[s._v("通过添加对外部词法环境的引用，建立作用域链，通过作用域链可以访问外部的变量对象；")])]),s._v(" "),a("li",[a("p",[s._v("确定 "),a("code",[s._v("this")]),s._v(" 的指向。")])])]),s._v(" "),a("p",[s._v("在执行阶段，变量对象（VO）会被激活为活动对象（AO），变量会进行赋值，此时活动对象才可被访问。在执行结束之后，作用域链和活动对象均被销毁，使用闭包可使活动对象依然被保留在内存中。这就是 "),a("code",[s._v("JavaScript")]),s._v(" 代码的运行过程。")]),s._v(" "),a("p",[a("strong",[s._v("实践")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("dir")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("foo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("问：整段代码的运行过程分别是怎样的，变量对象 AO/VO、作用域链、this 指向在各个阶段中又会怎样表现呢？")]),s._v(" "),a("p",[s._v("答：")]),s._v(" "),a("ul",[a("li",[s._v("首先将全局执行上下文栈 "),a("code",[s._v("window")]),s._v(" 压入执行栈中，全局执行上下文中， "),a("code",[s._v("foo")]),s._v(" 是函数声明，被提升，函数声明提升要优先于变量提升，此时全局执行上下文栈中，只包含一个 "),a("code",[s._v("foo")]),s._v(" 函数声明，同时将全局作用域绑定在 "),a("code",[s._v("foo")]),s._v(" 的作用域链上")]),s._v(" "),a("li",[s._v("执行 "),a("code",[s._v("foo")]),s._v(" 函数时，又为 "),a("code",[s._v("foo")]),s._v(" 新创建一个执行上下文栈，并压入执行栈中，此时执行权由全局 "),a("code",[s._v("window")]),s._v("，交到了"),a("code",[s._v("foo")]),s._v(" 函数上")]),s._v(" "),a("li",[s._v("进行编译阶段的工作，将变量 "),a("code",[s._v("a")]),s._v(" 提升，"),a("code",[s._v("bar")]),s._v(" 函数声明提升，此时 "),a("code",[s._v("foo")]),s._v(" 的执行上下文栈中，"),a("code",[s._v("a")]),s._v(" 是 "),a("code",[s._v("undefined")]),s._v("， "),a("code",[s._v("bar")]),s._v(" 是一个函数声明，"),a("code",[s._v("bar")]),s._v(" 的作用域包含全局作用域和 ·"),a("code",[s._v("foo")]),s._v(" 的作用域，")]),s._v(" "),a("li",[s._v("执行阶段， "),a("code",[s._v("a")]),s._v(" 赋值为 1， 此时 "),a("code",[s._v("a")]),s._v(" 变量对象变为了活动对象，"),a("code",[s._v("this")]),s._v(" 指向 "),a("code",[s._v("window")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("foo")]),s._v("函数执行完毕，将 "),a("code",[s._v("foo")]),s._v(" 从执行栈中弹出，执行权又交给 "),a("code",[s._v("window")]),s._v("。")])]),s._v(" "),a("h2",{attrs:{id:"拓展阅读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拓展阅读"}},[s._v("#")]),s._v(" 拓展阅读")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.yuque.com/javascript-interpreter/book/hbhr39",target:"_blank",rel:"noopener noreferrer"}},[s._v("《不懂编译也能造JavaScript解释器》\n"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=e.exports}}]);