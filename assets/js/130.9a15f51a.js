(window.webpackJsonp=window.webpackJsonp||[]).push([[130],{574:function(s,a,t){"use strict";t.r(a);var e=t(11),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"v8是如何执行一段javascript代码的？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v8是如何执行一段javascript代码的？"}},[s._v("#")]),s._v(" V8是如何执行一段JavaScript代码的？")]),s._v(" "),t("h3",{attrs:{id:"什么是-v8？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是-v8？"}},[s._v("#")]),s._v(" 什么是 V8？")]),s._v(" "),t("p",[t("code",[s._v("V8")]),s._v(" 是一个由 Google 开发的开源 "),t("code",[s._v("JavaScript")]),s._v(" 引擎，目前用在 Chrome 浏览器和 "),t("code",[s._v("Node.js")]),s._v(" 中，其核心功能是执行易于人类理解的 "),t("code",[s._v("JavaScript")]),s._v(" 代码。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/ca2cf22c8b2b322022666a3183db1b4d.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("那么 "),t("code",[s._v("V8")]),s._v(" 又是怎么执行 "),t("code",[s._v("JavaScript")]),s._v(" 代码的呢？")]),s._v(" "),t("p",[s._v("其主要核心流程分为编译和执行两步。首先需要将 "),t("code",[s._v("JavaScript")]),s._v(" 代码转换为低级中间代码或者机器能够理解的机器代码，然后再执行转换后的代码并输出执行结果。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/b77593de2fc7754d146e1218c45ef2bf.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("你可以把 "),t("code",[s._v("V8")]),s._v(" 看成是一个虚构出来的计算机，也称为虚拟机，虚拟机通过模拟实际计算机的各种功能来实现代码的执行，如模拟实际计算机的 CPU、堆栈、寄存器等，虚拟机还具有它自己的一套指令系统。")]),s._v(" "),t("p",[s._v("所以对于 "),t("code",[s._v("JavaScript")]),s._v(" 代码来说，"),t("code",[s._v("V8")]),s._v(" 就是它的整个世界，当 "),t("code",[s._v("V8")]),s._v(" 执行 "),t("code",[s._v("JavaScript")]),s._v(" 代码时，你并不需要担心现实中不同操作系统的差异，也不需要担心不同体系结构计算机的差异，你只需要按照虚拟机的规范写好代码就可以了。")]),s._v(" "),t("p",[s._v("既然 "),t("code",[s._v("V8")]),s._v(" 是虚构出来的计算机，用来编译和执行 "),t("code",[s._v("JavaScript")]),s._v(" 代码，那么接下来我们就看看，为什么计算机需要对 "),t("code",[s._v("JavaScript")]),s._v(" 这样的高级语言进行编译，以及编译完成后又是如何执行的。")]),s._v(" "),t("h3",{attrs:{id:"高级代码为什么需要先编译再执行？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#高级代码为什么需要先编译再执行？"}},[s._v("#")]),s._v(" 高级代码为什么需要先编译再执行？")]),s._v(" "),t("p",[s._v("我们先从 CPU 是怎么执行机器代码讲起，你可以把 CPU 看成是一个非常小的运算机器，我们可以通过二进制的指令和 CPU 进行沟通，比如我们给 CPU 发出“1000100111011000”的二进制指令，这条指令的意思是将一个寄存器中的数据移动到另外一个寄存器中，当处理器执行到这条指令的时候，便会按照指令的意思去实现相关的操作。")]),s._v(" "),t("p",[s._v("为了能够完成复杂的任务，工程师们为 CPU 提供了一大堆指令，来实现各种功能，我们就把这一大堆指令称为"),t("strong",[s._v("指令集（Instructions）")]),s._v("，也就是"),t("strong",[s._v("机器语言")]),s._v("。")]),s._v(" "),t("p",[s._v("注意，CPU 只能识别二进制的指令，但是对程序员来说，二进制代码难以阅读和记忆，于是我们又将二进制指令集转换为人类可以识别和记忆的符号，这就是汇编指令集，你可以参考下面的代码：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1000100111011000")]),s._v("  机器指令\nmov ax,bx         汇编指令\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("p",[s._v("那么你可能会问，CPU 能直接识别汇编语言吗？")]),s._v(" "),t("p",[s._v("答案是“不能”，所以如果你使用汇编编写了一段程序，你还需要一个汇编编译器，其作用是将汇编代码编程成机器代码，具体流程你可以参考下图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/6bb6d19ec37ea1a7d2cab2a25ea62b1f.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("虽然汇编语言对机器语言做了一层抽象，减少了程序员理解机器语言的复杂度，但是汇编语言依然是复杂且繁琐的，即便你写一个非常简单的功能，也需要实现大量的汇编代码，这主要表现在以下两点。")]),s._v(" "),t("p",[s._v("首先，不同的 CPU 有着不同的指令集，如果要使用机器语言或者汇编语言来实现一个功能，那么你需要为每种架构的 CPU 编写特定的汇编代码，这会带来巨大的、枯燥繁琐的操作，你可以参看下图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/75f4f88099f82bec62def94541189b70.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("其次，"),t("strong",[s._v("在编写汇编代码时，我们还需要了解和处理器架构相关的硬件知识")]),s._v("，比如你需要使用寄存器、内存、操作 CPU 等。大部分程序员在编写应用的时候，只想专心处理业务逻辑，并不想要过多地理会这些处理器架构相关的细节。")]),s._v(" "),t("p",[s._v("因此我们需要一种屏蔽了计算机架构细节的语言，能适应多种不同 CPU 架构的语言，能专心处理业务逻辑的语言，诸如 C、C++、Java、C#、Python、JavaScript 等，这些“高级语言”就应运而生了。")]),s._v(" "),t("p",[s._v("和汇编语言一样，处理器也不能直接识别由高级语言所编写的代码，那怎么办呢？通常，要有两种方式来执行这些代码。")]),s._v(" "),t("p",[s._v("第一种是解释执行，需要先将输入的源代码通过解析器编译成中间代码，之后直接使用解释器解释执行中间代码，然后直接输出结果。具体流程如下图所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/330ad69589d898f6609dfc083bfbe95e.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("第二种是编译执行。采用这种方式时，也需要先将源代码转换为中间代码，然后我们的编译器再将中间代码编译成机器代码。通常编译成的机器代码是以二进制文件形式存储的，需要执行这段程序的时候直接执行二进制文件就可以了。还可以使用虚拟机将编译后的机器代码保存在内存中，然后直接执行内存中的二进制代码。")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/1f933e42e81dacc8f4f2d86e01a914d3.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("以上就是计算机执行高级语言的两种基本的方式：解释执行和编译执行。但是针对不同的高级语言，这个实现方式还是有很大差异的，比如要执行 C 语言编写的代码，你需要将其编译为二进制代码的文件，然后再直接执行二进制代码。而对于像 Java 语言、JavaScript 语言等，则需要不同虚拟机，模拟计算机的这个编译执行流程。执行 Java 语言，需要经过 Java 虚拟机的转换，执行 JavaScript 需要经过 JavaScript 虚拟机的转换。")]),s._v(" "),t("p",[s._v("即便是 JavaScript 一门语言，也有好几种流行的虚拟机，它们之间的实现方式也存在着一部分差异，比如苹果公司在 Safari 中就是用 JavaScriptCore 虚拟机，Firefox 使用了 TraceMonkey 虚拟机，而 Chrome 则使用了 V8 虚拟机。")]),s._v(" "),t("h3",{attrs:{id:"v8-是怎么执行-javascript-代码的？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v8-是怎么执行-javascript-代码的？"}},[s._v("#")]),s._v(" V8 是怎么执行 JavaScript 代码的？")]),s._v(" "),t("p",[s._v("那么，V8 作为 JavaScript 的虚拟机的一种，它到底是怎么执行 JavaScript 代码的呢？是解释执行，还是编译执行呢？")]),s._v(" "),t("p",[s._v("实际上，V8 并没有采用某种单一的技术，而是"),t("strong",[s._v("解释执行和混合编译执行")]),s._v("这两种手段，我们把这种混合使用解释器和编译器的技术称为 "),t("strong",[s._v("JIT（Just In Time）技术")]),s._v("。")]),s._v(" "),t("p",[s._v("这是一种权衡策略，因为这两种方法都各自有各自的优缺点，"),t("strong",[s._v("解释执行的启动速度快，但是执行时的速度慢，而编译执行的启动速度慢，但是执行时的速度快")]),s._v("。你可以参考下面完整的 V8 执行 JavaScript 的流程图：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/8a34ae8c1a7a0f87e19b1384a025e354.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("我们先看上图中的最左边的部分，在 V8 启动执行 JavaScript 之前，它还需要准备执行 JavaScript 时所需要的一些基础环境，这些基础环境包括了“堆空间”“栈空间”“全局执行上下文”“全局作用域”“消息循环系统”“内置函数”等，这些内容都是在执行 JavaScript 过程中需要使用到的，比如：")]),s._v(" "),t("ul",[t("li",[s._v("JavaScript 全局执行上下文就包含了执行过程中的全局信息，比如一些内置函数，全局变量等信息；")]),s._v(" "),t("li",[s._v("全局作用域包含了一些全局变量，在执行过程中的数据都需要存放在内存中；")]),s._v(" "),t("li",[s._v("而 V8 是采用了经典的堆和栈的内存管理模式，所以 V8 还需要初始化内存中的堆和栈结构；")]),s._v(" "),t("li",[s._v("另外，想要我们的 V8 系统活起来，还需要初始化消息循环系统，消息循环系统包含了消息驱动器和消息队列，它如同 V8 的心脏，不断接受消息并决策如何处理消息。")])]),s._v(" "),t("p",[s._v("基础环境准备好之后，接下来就可以向 V8 提交要执行的 JavaScript 代码了。")]),s._v(" "),t("p",[s._v("首先 V8 会接收到要执行的 JavaScript 源代码，不过这对 V8 来说只是一堆字符串，V8 并不能直接理解这段字符串的含义，它需要"),t("strong",[s._v("结构化")]),s._v("这段字符串。结构化，是指信息经过分析后可分解成多个互相关联的组成部分，各组成部分间有明确的层次结构，方便使用和维护，并有一定的操作规范。")]),s._v(" "),t("p",[s._v("V8 源代码的结构化之后，就生成了抽象语法树 (AST)，我们称为 AST，AST 是便于 V8 理解的结构。")]),s._v(" "),t("p",[s._v("这里还需要注意一点，在生成 AST 的同时，V8 还会生成相关的作用域，作用域中存放相关变量")]),s._v(" "),t("p",[s._v("有了 AST 和作用域之后，接下来就可以生成字节码了，字节码是介于 AST 和机器代码的中间代码。但是与特定类型的机器代码无关，解释器可以直接解释执行字节码，或者通过编译器将其编译为二进制的机器代码再执行。")]),s._v(" "),t("p",[s._v("好了，生成了字节码之后，解释器就登场了，它会按照顺序解释执行字节码，并输出执行结果。")]),s._v(" "),t("p",[s._v("相信你注意到了，我们在解释器附近画了个监控机器人，这是一个监控解释器执行状态的模块，在解释执行字节码的过程中，如果发现了某一段代码会被重复多次执行，那么监控机器人就会将这段代码标记为热点代码。")]),s._v(" "),t("p",[s._v("当某段代码被标记为热点代码后，V8 就会将这段字节码丢给优化编译器，优化编译器会在后台将字节码编译为二进制代码，然后再对编译后的二进制代码执行优化操作，优化后的二进制机器代码的执行效率会得到大幅提升。如果下面再执行到这段代码时，那么 V8 会优先选择优化之后的二进制代码，这样代码的执行速度就会大幅提升。")]),s._v(" "),t("p",[s._v("不过，和静态语言不同的是，JavaScript 是一种非常灵活的动态语言，对象的结构和属性是可以在运行时任意修改的，而经过优化编译器优化过的代码只能针对某种固定的结构，一旦在执行过程中，对象的结构被动态修改了，那么优化之后的代码势必会变成无效的代码，这时候优化编译器就需要执行反优化操作，经过反优化的代码，下次执行时就会回退到解释器解释执行。")]),s._v(" "),t("h3",{attrs:{id:"跟踪一段实际代码的执行流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#跟踪一段实际代码的执行流程"}},[s._v("#")]),s._v(" 跟踪一段实际代码的执行流程")]),s._v(" "),t("p",[s._v("我们以一段最简单的 JavaScript 代码为例，如果将这段非常简单的代码提交给 V8 引擎，V8 在处理过程中，中间所产生的结果是怎样的呢？下面我们就一步一步详细“追踪”下。")]),s._v(" "),t("p",[s._v("代码如下所示：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" test "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'GeekTime'")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("我们知道，首先这段代码会被解析器结构化成 AST，下面我们就来看看第一阶段生成的 AST 是什么样子的？")]),s._v(" "),t("p",[s._v("要查看 V8 中间生成的一些结构，可以使用 V8 提供的调试工具 D8 来查看，你可以将上面那段代码保存到 test.js 的文件中，然后执行下面命令：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("d8 --print-ast test.js\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("执行这段命令之后，D8 会打印出如下内容：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("--- AST ---\nFUNC at "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" KIND "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" LITERAL ID "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" SUSPEND COUNT "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" NAME "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" INFERRED NAME "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" DECLS\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" VARIABLE "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("0x7ff0e3022298"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" VAR, assigned "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" BLOCK NOCOMPLETIONS at -1\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" EXPRESSION STATEMENT at "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" INIT at "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" VAR PROXY unallocated "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("0x7ff0e3022298"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("mode "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" VAR, assigned "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"test"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v(" LITERAL "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"GeekTime"')]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("p",[s._v("上面这个结构就是 AST，它就是 JS 源代码的结构化表述，AST 是个树状结构，直观地理解，你可以将其转换为一个图形树，如下图所示：")]),s._v(" "),t("p",[t("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/57018772d9a93d367c07ce51b91e1f87.jpg",alt:"img"}})]),s._v(" "),t("p",[s._v("从图中可以看出，AST 和代码结构也是一一对应关系，并且后续所有的操作都会直接或者间接基于它。")]),s._v(" "),t("p",[s._v("上面我们还提到了，在生成 AST 的同时，还会生成作用域，同样我们使用 D8 来看看它生成的作用域是什么样子，你可以使用下面的命令来查看作用域：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("d8 --print-scopes test.js\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("执行这段命令之后，D8 会打印出如下内容：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[s._v("Global scope"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\nglobal "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (0x7fd974022048) (0, 24)")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// will be compiled")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1 stack slots")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// temporary vars:")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("TEMPORARY")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("result"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (0x7fd9740223c8) local[0]")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// local vars:")]),s._v("\n  "),t("span",{pre:!0,attrs:{class:"token constant"}},[s._v("VAR")]),s._v(" test"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// (0x7fd974022298)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("p",[s._v("上面这行代码生成了一个全局作用域，我们可以看到 test 变量被添加进了这个全局作用域中。")]),s._v(" "),t("p",[s._v("生成了 AST 和作用域之后，就可以使用解释器生成字节码了，同样你可以使用 D8 来打印生成后的字节码，打印的命令如下所示：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("d8 --print-bytecode test.js\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("执行这段语句，最终打印出来的结果如下所示：")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\n[generated bytecode for function:  (0x2b510824fd55 <SharedFunctionInfo>)]\nParameter count 1\nRegister count 4\nFrame size 32\n         0x2b510824fdd2 @    0 : a7                StackCheck\n         0x2b510824fdd3 @    1 : 12 00             LdaConstant [0]\n         0x2b510824fdd5 @    3 : 26 fa             Star r1\n         0x2b510824fdd7 @    5 : 0b                LdaZero\n         0x2b510824fdd8 @    6 : 26 f9             Star r2\n         0x2b510824fdda @    8 : 27 fe f8          Mov <closure>, r3\n         0x2b510824fddd @   11 : 61 32 01 fa 03    CallRuntime [DeclareGlobals], r1-r3\n         0x2b510824fde2 @   16 : 12 01             LdaConstant [1]\n         0x2b510824fde4 @   18 : 15 02 02          StaGlobal [2], [2]\n         0x2b510824fde7 @   21 : 0d                LdaUndefined\n         0x2b510824fde8 @   22 : ab                Return\nConstant pool (size = 3)\n0x2b510824fd9d: [FixedArray] in OldSpace\n - map: 0x2b51080404b1 <Map>\n - length: 3\n           0: 0x2b510824fd7d <FixedArray[4]>\n           1: 0x2b510824fd1d <String[#8]: GeekTime>\n           2: 0x2b51081c8549 <String[#4]: test>\nHandler Table (size = 0)\nSource Position Table (size = 0)\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("p",[s._v("上面就是这段代码生成的中间字节码")]),s._v(" "),t("p",[s._v("生成字节码之后，解释器会解释执行这段字节码，如果重复执行了某段代码，监控器就会将其标记为热点代码，并提交给编译器优化执行，如果你想要查看那些代码被优化了，可以使用下面的命令：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("d8 --trace-opt test.js\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("如果要查看那些代码被反优化了，可以使用如下命令行来查看：")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("pt --trace-deopt test.js\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("由于我们这段代码过于简单，没有触发 V8 的优化机制，在这里我们也就不展开介绍优化机制了")]),s._v(" "),t("h3",{attrs:{id:"总结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),t("p",[s._v("V8 是由 Google 开发的开源 JavaScript 引擎，也被称为虚拟机，模拟实际计算机各种功能来实现代码的编译和执行。那么，要想搞清楚 V8 内部的工作流程和原理，我们可以从分析计算机对语言的编译和执行过程入手。")]),s._v(" "),t("p",[s._v("因为计算机只能识别二进制指令，所以要让计算机执行一段高级语言通常有两种手段，第一种是将高级代码转换为二进制代码，再让计算机去执行；另外一种方式是在计算机安装一个解释器，并由解释器来解释执行。")]),s._v(" "),t("p",[s._v("解释执行和编译执行都有各自的优缺点，解释执行启动速度快，但是执行时速度慢，而编译执行启动速度慢，但是执行速度快。为了充分地利用解释执行和编译执行的优点，规避其缺点，V8 采用了一种权衡策略，在启动过程中采用了解释执行的策略，但是如果某段代码的执行频率超过一个值，那么 V8 就会采用优化编译器将其编译成执行效率更加高效的机器代码。")]),s._v(" "),t("p",[s._v("理解了这一点，我们就可以来深入分析 V8 执行一段 JavaScript 代码所经历的主要流程了，这包括了：")]),s._v(" "),t("ul",[t("li",[s._v("初始化基础环境；")]),s._v(" "),t("li",[s._v("解析源码生成 AST 和作用域；")]),s._v(" "),t("li",[s._v("依据 AST 和作用域生成字节码；")]),s._v(" "),t("li",[s._v("解释执行字节码；")]),s._v(" "),t("li",[s._v("监听热点代码；")]),s._v(" "),t("li",[s._v("优化热点代码为二进制的机器代码；")]),s._v(" "),t("li",[s._v("反优化生成的二进制机器代码。")])]),s._v(" "),t("p",[s._v("这里你需要注意的是，JavaScript 是一门动态语言，在运行过程中，某些被优化的结构可能会被 V8 动态修改了，这会导致之前被优化的代码失效，如果某块优化之后的代码失效了，那么编译器需要执行反优化操作。")]),s._v(" "),t("p",[t("strong",[s._v("课后思考")])]),s._v(" "),t("p",[s._v("除了 V8 采用了 JIT 技术，还有哪些虚拟机采用了 JIT 技术？")]),s._v(" "),t("p",[s._v("答：")]),s._v(" "),t("ul",[t("li",[s._v("著名的还有JVM以及luajit，包括oracle最新的graalVM")]),s._v(" "),t("li",[s._v("PHP -> https://wiki.php.net/rfc/jit")]),s._v(" "),t("li",[s._v("HotSpot")]),s._v(" "),t("li",[s._v("Dalvik -> https://android-developers.googleblog.com/2010/05/dalvik-jit.html")]),s._v(" "),t("li",[s._v("Dart VM")]),s._v(" "),t("li",[s._v("PyPy")]),s._v(" "),t("li",[s._v("Ruby 2.6+")]),s._v(" "),t("li",[s._v("……")])]),s._v(" "),t("h3",{attrs:{id:"优质问答区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#优质问答区"}},[s._v("#")]),s._v(" 优质问答区")]),s._v(" "),t("p",[t("strong",[s._v("1、全局执行上下文和全局作用域啥关系呢")])]),s._v(" "),t("p",[s._v("执行上下文是运行代码时的基础环境，包括了变量环境，词法环境，this值，外部环境等内容。")]),s._v(" "),t("p",[s._v("全局执行上下文就是指全局代码执行时的运行环境。")]),s._v(" "),t("p",[s._v("而作用域是一个抽象概念，它主要引用了执行上下文中的变量，以方便查找。")]),s._v(" "),t("p",[s._v("如果全局执行上下文中有块级作用域：")]),s._v(" "),t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n｛\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v("\n｝\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br")])]),t("p",[s._v("比如执行上面这样的代码，当执行到大括号里面时，全局执行上下文只有一个，但是作用域却有两个")]),s._v(" "),t("p",[t("strong",[s._v("2、使用 jsvu 来安装 js 引擎")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('1. 全局安装 jsvu： npm install jsvu -g\n\n2. 将~/.jsvu路径添加到系统环境变量中：export PATH="${HOME}/.jsvu:${PATH}"\n\n3. 可以直接通过命令参数指定： jsvu --os=mac64 --engines=v8-debug。\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);