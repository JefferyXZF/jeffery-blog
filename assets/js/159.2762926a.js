(window.webpackJsonp=window.webpackJsonp||[]).push([[159],{592:function(t,s,e){"use strict";e.r(s);var n=e(11),r=Object(n.a)({},(function(){var t=this.$createElement,s=this._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("h1",{attrs:{id:"模板方法模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式"}},[this._v("#")]),this._v(" 模板方法模式")]),this._v(" "),s("p",[this._v("模板方法模式准备一个抽象类，将部分逻辑以具体方法以及具体构造子的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。先制定一个顶级逻辑框架，而将逻辑的细节留给具体的子类去实现。")])])}),[],!1,null,null,null);s.default=r.exports}}]);