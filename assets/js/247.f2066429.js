(window.webpackJsonp=window.webpackJsonp||[]).push([[247],{678:function(e,a,t){"use strict";t.r(a);var v=t(11),_=Object(v.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"babel-基础"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-基础"}},[e._v("#")]),e._v(" babel 基础")]),e._v(" "),t("h2",{attrs:{id:"babel-是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-是什么"}},[e._v("#")]),e._v(" babel 是什么")]),e._v(" "),t("p",[t("code",[e._v("Babel")]),e._v(" 是一个工具链，主要用于将 "),t("code",[e._v("ECMAScript 2015+")]),e._v(" 版本的代码转换为向后兼容的 "),t("code",[e._v("JavaScript")]),e._v(" 语法，以便能够运行在当前和旧版本的浏览器或其他环境中。")]),e._v(" "),t("h2",{attrs:{id:"babel-作用"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-作用"}},[e._v("#")]),e._v(" babel 作用")]),e._v(" "),t("h3",{attrs:{id:"转译-esnext、typescript、flow-等语法到目标环境支持的-js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#转译-esnext、typescript、flow-等语法到目标环境支持的-js"}},[e._v("#")]),e._v(" 转译 esnext、typescript、flow 等语法到目标环境支持的 js")]),e._v(" "),t("p",[t("code",[e._v("babel")]),e._v(" 将代码中的 "),t("code",[e._v("esnext")]),e._v("、"),t("code",[e._v("typescript")]),e._v(" 、 "),t("code",[e._v("flow")]),e._v(" 的语法转化为目标环境支持的语法。并且还可以把目标环境不支持的 "),t("code",[e._v("api")]),e._v(" 进行 "),t("code",[e._v("polyfill")]),e._v("。")]),e._v(" "),t("p",[t("code",[e._v("babel7")]),e._v("支持了 "),t("code",[e._v("preset-env")]),e._v("，可以指定 "),t("code",[e._v("targets")]),e._v(" 来进行按需转换，转换更加的精准，产物更小。")]),e._v(" "),t("h3",{attrs:{id:"一些特定用途的代码转换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一些特定用途的代码转换"}},[e._v("#")]),e._v(" 一些特定用途的代码转换")]),e._v(" "),t("p",[t("code",[e._v("babel")]),e._v(" 是一个转译器，暴露了很多 "),t("code",[e._v("api")]),e._v("，用这些 "),t("code",[e._v("api")]),e._v(" 可以完成代码到 "),t("code",[e._v("AST")]),e._v(" 的 "),t("code",[e._v("parse")]),e._v("，"),t("code",[e._v("AST")]),e._v(" 的转换，以及目标代码的生成。")]),e._v(" "),t("p",[e._v("开发者可以用它来来完成一些特定用途的转换，比如函数插桩（函数中自动插入一些代码，例如埋点代码）、自动国际化、"),t("code",[e._v("default import")]),e._v(" 转 "),t("code",[e._v("named import")]),e._v(" 等。这些都是后面的实战案例。")]),e._v(" "),t("p",[e._v("现在比较流行的小程序转译工具 "),t("code",[e._v("taro")]),e._v("，就是基于 "),t("code",[e._v("babel")]),e._v(" 的 "),t("code",[e._v("api")]),e._v(" 来实现的。")]),e._v(" "),t("h3",{attrs:{id:"代码的静态分析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#代码的静态分析"}},[e._v("#")]),e._v(" 代码的静态分析")]),e._v(" "),t("p",[e._v("对代码进行 "),t("code",[e._v("parse")]),e._v(" 之后，能够进行转换，是因为通过 "),t("code",[e._v("AST")]),e._v(" 的结构能够理解代码。理解了代码之后，除了进行转换然后生成目标代码之外，也同样可以用于分析代码的信息，进行一些检查。")]),e._v(" "),t("ul",[t("li",[t("p",[t("code",[e._v("linter")]),e._v(" 工具就是分析 "),t("code",[e._v("AST")]),e._v(" 的结构，对代码规范进行检查。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("api")]),e._v(" 文档自动生成工具，可以提取源码中的注释，然后生成文档。")])]),e._v(" "),t("li",[t("p",[t("code",[e._v("type checker")]),e._v(" 会根据从 "),t("code",[e._v("AST")]),e._v(" 中提取的或者推导的类型信息，对 "),t("code",[e._v("AST")]),e._v(" 进行类型是否一致的检查，从而减少运行时因类型导致的错误。")])]),e._v(" "),t("li",[t("p",[e._v("压缩混淆工具，这个也是分析代码结构，进行删除死代码、变量名混淆、常量折叠等各种编译优化，生成体积更小、性能更优的代码。")])]),e._v(" "),t("li",[t("p",[e._v("js 解释器，除了对 "),t("code",[e._v("AST")]),e._v(" 进行各种信息的提取和检查以外，我们还可以直接解释执行 "),t("code",[e._v("AST")]),e._v("。")])])]),e._v(" "),t("h2",{attrs:{id:"babel-编译流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-编译流程"}},[e._v("#")]),e._v(" babel 编译流程")]),e._v(" "),t("h2",{attrs:{id:"babel-的编译流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#babel-的编译流程"}},[e._v("#")]),e._v(" babel 的编译流程")]),e._v(" "),t("p",[e._v("babel 是 source to source 的转换，整体编译流程分为三步：")]),e._v(" "),t("ul",[t("li",[e._v("parse：通过 parser 把源码转成抽象语法树（AST）")]),e._v(" "),t("li",[e._v("transform：遍历 AST，调用各种 transform 插件对 AST 进行增删改")]),e._v(" "),t("li",[e._v("generate：把转换后的 AST 打印成目标代码，并生成 sourcemap")])]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ee9eaa1f265c4c49ad156f2c691748d9~tplv-k3u1fbpfcp-watermark.image",alt:"img"}})]),e._v(" "),t("h3",{attrs:{id:"为什么会分为这三步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么会分为这三步"}},[e._v("#")]),e._v(" 为什么会分为这三步")]),e._v(" "),t("p",[e._v("有没有想过，为什么 babel 的编译流程会分 parse、transform、generate 这 3 步呢？")]),e._v(" "),t("p",[e._v("源码是一串按照语法格式来组织的字符串，人能够认识，但是计算机并不认识，想让计算机认识就要转成一种数据结构，通过不同的对象来保存不同的数据，并且按照依赖关系组织起来，这种数据结构就是抽象语法树（abstract syntax tree）。之所以叫抽象语法树是因为数据结构中省略掉了一些无具体意义的分隔符比如 "),t("code",[e._v(";")]),e._v(" "),t("code",[e._v("{")]),e._v(" "),t("code",[e._v("}")]),e._v(" 等。有了 AST，计算机就能理解源码字符串的意思，而理解是能够转换的前提，所以编译的第一步需要把源码 parse 成 AST。")]),e._v(" "),t("p",[e._v("转成 AST 之后就可以通过修改 AST 的方式来修改代码，这一步会遍历 AST 并进行各种增删改，这一步也是 babel 最核心的部分。")]),e._v(" "),t("p",[e._v("经过转换以后的 AST 就是符合要求的代码，就可以再转回字符串，转回字符串的过程中把之前删掉的一些分隔符再加回来。")]),e._v(" "),t("p",[e._v("简单总结一下就是："),t("strong",[e._v("为了让计算机理解代码需要先对源码字符串进行 parse，生成 AST，把对代码的修改转为对 AST 的增删改，转换完 AST 之后再打印成目标代码字符串。")])]),e._v(" "),t("h3",{attrs:{id:"这三步都做了什么？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#这三步都做了什么？"}},[e._v("#")]),e._v(" 这三步都做了什么？")]),e._v(" "),t("p",[e._v("我们知道了为什么 babel 要分为这样的 3 步，那这 3 步具体都做了什么呢？")]),e._v(" "),t("h4",{attrs:{id:"parse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parse"}},[e._v("#")]),e._v(" parse")]),e._v(" "),t("p",[e._v("parse 阶段的目的是把源码字符串转换成机器能够理解的 AST，这个过程分为词法分析、语法分析。")]),e._v(" "),t("p",[e._v("比如 "),t("code",[e._v("let name = 'guang';")]),e._v(" 这样一段源码，我们要先把它分成一个个不能细分的单词（token），也就是 "),t("code",[e._v("let")]),e._v(", "),t("code",[e._v("name")]),e._v(", "),t("code",[e._v("=")]),e._v(", "),t("code",[e._v("'guang'")]),e._v("，这个过程是词法分析，按照单词的构成规则来拆分字符串成单词。")]),e._v(" "),t("p",[e._v("之后要把 token 进行递归的组装，生成 AST，这个过程是语法分析，按照不同的语法结构，来把一组单词组合成对象。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03bdbe8096944a0fa09c86ac2ff09e56~tplv-k3u1fbpfcp-watermark.image",alt:"img"}})]),e._v(" "),t("h4",{attrs:{id:"transform"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#transform"}},[e._v("#")]),e._v(" transform")]),e._v(" "),t("p",[e._v("transform 阶段是对 parse 生成的 AST 的处理，会进行 AST 的遍历，遍历的过程中处理到不同的 AST 节点会调用注册的相应的 visitor 函数，visitor 函数里可以对 AST 节点进行增删改，返回新的 AST（可以指定是否继续遍历新生成的 AST）。这样遍历完一遍 AST 之后就完成了对代码的修改。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/494b0bc006f64c71a92947f560e97e8c~tplv-k3u1fbpfcp-watermark.image",alt:"img"}})]),e._v(" "),t("h4",{attrs:{id:"generate"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#generate"}},[e._v("#")]),e._v(" generate")]),e._v(" "),t("p",[e._v("generate 阶段会把 AST 打印成目标代码字符串，并且会生成 sourcemap。不同的 AST 对应的不同结构的字符串。比如 "),t("code",[e._v("IfStatement")]),e._v(" 就可以打印成 "),t("code",[e._v("if(test) {}")]),e._v(" 格式的代码。这样从 AST 根节点进行递归打印，就可以生成目标代码的字符串。")]),e._v(" "),t("p",[t("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/84530b477a7540ee87e5bb12e9375569~tplv-k3u1fbpfcp-watermark.image",alt:"img"}})]),e._v(" "),t("p",[e._v("sourcemap 记录了源码到目标代码的转换关系，通过它我们可以找到目标代码中每一个节点对应的源码位置。")]),e._v(" "),t("h2",{attrs:{id:"拓展阅读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拓展阅读"}},[e._v("#")]),e._v(" 拓展阅读")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://juejin.cn/book/6946117847848321055/section/6956174385904353288",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel 插件通关秘籍"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.cn/column/6960560560698032165",target:"_blank",rel:"noopener noreferrer"}},[e._v("前端编译与工程化闭环"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.cn/tag/Babel",target:"_blank",rel:"noopener noreferrer"}},[e._v("babel标签-掘金"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=_.exports}}]);