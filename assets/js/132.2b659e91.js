(window.webpackJsonp=window.webpackJsonp||[]).push([[132],{563:function(t,s,a){"use strict";a.r(s);var e=a(11),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"快属性和慢属性：v8是怎样提升对象属性访问速度的？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快属性和慢属性：v8是怎样提升对象属性访问速度的？"}},[t._v("#")]),t._v(" 快属性和慢属性：V8是怎样提升对象属性访问速度的？")]),t._v(" "),a("p",[a("code",[t._v("JavaScript")]),t._v(" 中的对象是由一组组属性和值的集合，从 "),a("code",[t._v("JavaScript")]),t._v(" 语言的角度来看，"),a("code",[t._v("JavaScript")]),t._v(" 对象像一个字典，字符串作为键名，任意对象可以作为键值，可以通过键名读写键值。")]),t._v(" "),a("p",[t._v("然而在 "),a("code",[t._v("V8")]),t._v(" 实现对象存储时，并没有完全采用字典的存储方式，这主要是出于性能的考量。因为字典是非线性的数据结构，查询效率会低于线性的数据结构，"),a("code",[t._v("V8")]),t._v(" 为了提升存储和查找效率，采用了一套复杂的存储策略。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/c970cdc7b89bfe0a12e560fe94fcdfef.jpg",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"常规属性-properties-和排序属性-element"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常规属性-properties-和排序属性-element"}},[t._v("#")]),t._v(" 常规属性 (properties) 和排序属性 (element)")]),t._v(" "),a("p",[t._v("在开始之前，我们先来了解什么是对象中的"),a("strong",[t._v("常规属性")]),t._v("和"),a("strong",[t._v("排序属性")]),t._v("，你可以先参考下面这样一段代码：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test-100'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test-1'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar-B'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test-50'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test-9'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test-8'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test-3'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test-5'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar-A'")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"C"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bar-C'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("index:")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("  value:")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br")])]),a("p",[t._v("在上面这段代码中，我们利用构造函数 "),a("code",[t._v("Foo")]),t._v(" 创建了一个 "),a("code",[t._v("bar")]),t._v(" 对象，在构造函数中，我们给 "),a("code",[t._v("bar")]),t._v(" 对象设置了很多属性，包括了数字属性和字符串属性，然后我们枚举出来了 "),a("code",[t._v("bar")]),t._v(" 对象中所有的属性，并将其一一打印出来，下面就是执行这段代码所打印出来的结果：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("index"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\nindex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("  value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\nindex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("  value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\nindex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("  value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\nindex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("  value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\nindex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v("  value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50")]),t._v("\nindex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("  value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("test"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),t._v("\nindex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("  value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v("\nindex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("  value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v("\nindex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v("  value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("bar"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("观察这段打印出来的数据，我们发现打印出来的属性顺序并不是我们设置的顺序，我们设置属性的时候是乱序设置的，比如开始先设置 100，然后又设置了 1，但是输出的内容却非常规律，总的来说体现在以下两点：")]),t._v(" "),a("ul",[a("li",[t._v("设置的数字属性被最先打印出来了，并且是按照数字大小的顺序打印的；")]),t._v(" "),a("li",[t._v("设置的字符串属性依然是按照之前的设置顺序打印的，比如我们是按照 B、A、C 的顺序设置的，打印出来依然是这个顺序。")])]),t._v(" "),a("p",[t._v("之所以出现这样的结果，是因为在 ECMAScript 规范中定义了"),a("strong",[t._v("数字属性应该按照索引值大小升序排列，字符串属性根据创建时的顺序升序排列")]),t._v("。")]),t._v(" "),a("p",[t._v("在这里我们把对象中的数字属性称为"),a("strong",[t._v("排序属性")]),t._v("，在 "),a("code",[t._v("V8")]),t._v(" 中被称为 "),a("strong",[t._v("elements")]),t._v("，字符串属性就被称为"),a("strong",[t._v("常规属性")]),t._v("，在 "),a("code",[t._v("V8")]),t._v(" 中被称为 "),a("strong",[t._v("properties")]),t._v("。")]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("V8")]),t._v(" 内部，为了有效地提升存储和访问这两种属性的性能，分别使用了两个线性数据结构来分别保存排序属性和常规属性，具体结构如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/af2654db3d3a2e0b9a9eaa25e862cc75.jpg",alt:"img"}})]),t._v(" "),a("p",[t._v("通过上图我们可以发现，"),a("code",[t._v("bar")]),t._v(" 对象包含了两个隐藏属性："),a("code",[t._v("elements")]),t._v(" 属性和 "),a("code",[t._v("properties")]),t._v(" 属性，"),a("code",[t._v("elements")]),t._v(" 属性指向了 "),a("code",[t._v("elements")]),t._v(" 对象，在 "),a("code",[t._v("elements")]),t._v(" 对象中，会按照顺序存放排序属性，"),a("code",[t._v("properties")]),t._v(" 属性则指向了 "),a("code",[t._v("properties")]),t._v(" 对象，在 "),a("code",[t._v("properties")]),t._v(" 对象中，会按照创建时的顺序保存了常规属性。")]),t._v(" "),a("p",[t._v("分解成这两种线性数据结构之后，如果执行索引操作，那么 V8 会先从 "),a("code",[t._v("elements")]),t._v(" 属性中按照顺序读取所有的元素，然后再在 "),a("code",[t._v("properties")]),t._v(" 属性中读取所有的元素，这样就完成一次索引操作。")]),t._v(" "),a("h3",{attrs:{id:"快属性和慢属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快属性和慢属性"}},[t._v("#")]),t._v(" 快属性和慢属性")]),t._v(" "),a("p",[t._v("将不同的属性分别保存到 "),a("code",[t._v("elements")]),t._v(" 属性和 "),a("code",[t._v("properties")]),t._v(" 属性中，无疑简化了程序的复杂度，但是在查找元素时，却多了一步操作，比如执行"),a("code",[t._v("bar.B")]),t._v(" 这个语句来查找 "),a("code",[t._v("B")]),t._v(" 的属性值，那么在 "),a("code",[t._v("V8")]),t._v(" 会先查找出 "),a("code",[t._v("properties")]),t._v(" 属性所指向的对象 "),a("code",[t._v("properties")]),t._v("，然后再在 "),a("code",[t._v("properties")]),t._v(" 对象中查找 "),a("code",[t._v("B")]),t._v(" 属性，这种方式在查找过程中增加了一步操作，因此会影响到元素的查找效率。")]),t._v(" "),a("p",[t._v("基于这个原因，V8 采取了一个权衡的策略以加快查找属性的效率，这个策略是将部分常规属性直接存储到对象本身，我们把这称为"),a("strong",[t._v("对象内属性 (in-object properties)")]),t._v("。对象在内存中的展现形式你可以参看下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/f12b4c6f6e631ce51d5b4f288dbfb13e.jpg",alt:"img"}})]),t._v(" "),a("p",[t._v("采用对象内属性之后，常规属性就被保存到 "),a("code",[t._v("bar")]),t._v(" 对象本身了，这样当再次使用 "),a("code",[t._v("bar.B")]),t._v(" 来查找 "),a("code",[t._v("B")]),t._v(" 的属性值时，"),a("code",[t._v("V8")]),t._v(" 就可以直接从 "),a("code",[t._v("bar")]),t._v(" 对象本身去获取该值就可以了，这种方式减少查找属性值的步骤，增加了查找效率。")]),t._v(" "),a("p",[t._v("不过对象内属性的数量是固定的，默认是 10 个，如果添加的属性超出了对象分配的空间，则它们将被保存在常规属性存储中。虽然属性存储多了一层间接层，但可以自由地扩容。")]),t._v(" "),a("p",[t._v("通常，我们将保存在线性数据结构中的属性称之为“快属性”，因为线性数据结构中只需要通过索引即可以访问到属性，虽然访问线性结构的速度快，但是如果从线性结构中添加或者删除大量的属性时，则执行效率会非常低，这主要因为会产生大量时间和内存开销。")]),t._v(" "),a("p",[t._v("因此，如果一个对象的属性过多时，V8 就会采取另外一种存储策略，那就是“慢属性”策略，但慢属性的对象内部会有独立的非线性数据结构 (词典) 作为属性存储容器。所有的属性元信息不再是线性存储的，而是直接保存在属性字典中。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/e8ce990dce53295a414ce79e38149917.jpg",alt:"img"}})]),t._v(" "),a("h3",{attrs:{id:"实践：在-chrome-中查看对象布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实践：在-chrome-中查看对象布局"}},[t._v("#")]),t._v(" 实践：在 Chrome 中查看对象布局")]),t._v(" "),a("p",[t._v("现在我们知道了 V8 是怎么存储对象的了，接下来我们来结合 Chrome 中的内存快照，来看看对象在内存中是如何布局的？")]),t._v(" "),a("p",[t._v("你可以打开 Chrome 开发者工具，先选择控制台标签，然后在控制台中执行以下代码查看内存快照：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("property_num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("element_num")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//添加可索引属性")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" element_num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("element")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//添加常规属性")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" property_num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ppt "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("property")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("ppt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ppt\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bar "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("上面我们创建了一个构造函数，可以利用该构造函数创建了新的对象，我给该构造函数设置了两个参数 "),a("code",[t._v("property_num")]),t._v("、"),a("code",[t._v("element_num")]),t._v("，分别代表创建常规属性的个数和排序属性的个数，我们先将这两种类型的个数都设置为 10 个，然后利用该构造函数创建了一个新的 bar 对象。")]),t._v(" "),a("p",[t._v("创建了函数对象，接下来我们就来看看构造函数和对象在内存中的状态。你可以将 Chrome 开发者工具切换到 Memory 标签，然后点击左侧的小圆圈就可以捕获当前的内存快照，最终截图如下所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/d2a123d127a2895d9f0d09be61cc55d3.png",alt:"img"}})]),t._v(" "),a("p",[t._v("上图就是收集了当前内存快照的界面，要想查找我们刚才创建的对象，你可以在搜索框里面输入构造函数 "),a("code",[t._v("Foo")]),t._v("，Chrome 会列出所有经过构造函数 "),a("code",[t._v("Foo")]),t._v(" 创建的对象，如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/2b4ee447d061f72026ca38d6dfc25389.png",alt:"img"}})]),t._v(" "),a("p",[t._v("观察上图，我们搜索出来了所有经过构造函数 "),a("code",[t._v("Foo")]),t._v(" 创建的对象，点开 "),a("code",[t._v("Foo")]),t._v(" 的那个下拉列表，第一个就是刚才创建的 "),a("code",[t._v("bar")]),t._v(" 对象，我们可以看到 "),a("code",[t._v("bar")]),t._v(" 对象有一个 elements 属性，这里面就包含我们创造的所有的排序属性，那么怎么没有常规属性对象呢？")]),t._v(" "),a("p",[t._v("这是因为只创建了 10 个常规属性，所以 V8 将这些常规属性直接做成了 "),a("code",[t._v("bar")]),t._v(" 对象的对象内属性。")]),t._v(" "),a("p",[t._v("所以这时候的数据内存布局是这样的：")]),t._v(" "),a("ul",[a("li",[t._v("10 个常规属性作为对象内属性，存放在 "),a("code",[t._v("bar")]),t._v(" 函数内部；")]),t._v(" "),a("li",[t._v("10 个排序属性存放在 "),a("code",[t._v("elements")]),t._v(" 中。")])]),t._v(" "),a("p",[t._v("接下来我们可以将创建的对象属性的个数调整到 20 个，你可以在控制台执行下面这段代码：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bar2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("然后我们再重新生成内存快照，再来看看生成的图片：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/ef117bbc99504f1daea52a0831a5756e.png",alt:"img"}})]),t._v(" "),a("p",[t._v("我们可以看到，构造函数 "),a("code",[t._v("Foo")]),t._v(" 下面已经有了两个对象了，其中一个 "),a("code",[t._v("bar")]),t._v("，另外一个是 "),a("code",[t._v("bar2")]),t._v("，我们点开第一个 "),a("code",[t._v("bar2")]),t._v(" 对象，内容如下所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/49c1f8e735e5b7772f3d54fb53eae386.png",alt:"img"}})]),t._v(" "),a("p",[t._v("由于创建的常用属性超过了 10 个，所以另外 10 个常用属性就被保存到 "),a("code",[t._v("properties")]),t._v(" 中了，注意因为 "),a("code",[t._v("properties")]),t._v(" 中只有 10 个属性，所以依然是线性的数据结构，我们可以看其都是按照创建时的顺序来排列的。")]),t._v(" "),a("p",[t._v("所以这时候属性的内存布局是这样的：")]),t._v(" "),a("ul",[a("li",[t._v("10 属性直接存放在 bar2 的对象内 ;")]),t._v(" "),a("li",[t._v("10 个常规属性以线性数据结构的方式存放在 properties 属性里面 ;")]),t._v(" "),a("li",[t._v("10 个数字属性存放在 elements 属性里面。")])]),t._v(" "),a("p",[t._v("如果常用属性太多了，比如创建了 100 个，那么我们再来看看其内存分布，你可以执行下面这段代码：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" bar3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Foo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("然后以同样的方式打开 "),a("code",[t._v("bar3")]),t._v("，查看其内存布局，最终如下图所示：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/dab6d6e2291117781e4294f27113d469.png",alt:"img"}})]),t._v(" "),a("p",[t._v("结合上图，我们可以看到，这时候的 "),a("code",[t._v("properties")]),t._v(" 属性里面的数据并不是线性存储的，而是以非线性的字典形式存储的，所以这时候属性的内存布局是这样的：")]),t._v(" "),a("ul",[a("li",[t._v("10 属性直接存放在 "),a("code",[t._v("bar3")]),t._v(" 的对象内 ;")]),t._v(" "),a("li",[t._v("90 个常规属性以非线性字典的这种数据结构方式存放在 "),a("code",[t._v("properties")]),t._v(" 属性里面 ;")]),t._v(" "),a("li",[t._v("10 个数字属性存放在 "),a("code",[t._v("elements")]),t._v(" 属性里面。")])]),t._v(" "),a("h3",{attrs:{id:"其他属性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他属性"}},[t._v("#")]),t._v(" 其他属性")]),t._v(" "),a("p",[t._v("好了，现在我们知道 V8 是怎么存储对象的了，不过这里还有几个重要的隐藏属性还没有介绍，下面我们就来简单地看下。你可以先看下图：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/82463f4c1a4bf5fb8920b0099284e84d.png",alt:"img"}})]),t._v(" "),a("p",[t._v("观察上图，除了 "),a("code",[t._v("elements")]),t._v(" 和 "),a("code",[t._v("properties")]),t._v(" 属性，"),a("code",[t._v("V8")]),t._v(" 还为每个对象实现了 "),a("code",[t._v("map")]),t._v(" 属性和 "),a("code",[t._v("__proto__")]),t._v(" 属性。"),a("code",[t._v("__proto__")]),t._v(" 属性就是原型，是用来实现 "),a("code",[t._v("JavaScript")]),t._v(" 继承的")]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("介绍 V8 内部是如何存储对象的，因为 "),a("code",[t._v("JavaScript")]),t._v(" 中的对象是由一组组属性和值组成的，所以最简单的方式是使用一个字典来保存属性和值，但是由于字典是非线性结构，所以如果使用字典，读取效率会大大降低。")]),t._v(" "),a("p",[t._v("为了提升查找效率，V8 在对象中添加了两个隐藏属性，排序属性和常规属性，"),a("code",[t._v("element")]),t._v(" 属性指向了 "),a("code",[t._v("elements")]),t._v(" 对象，在 "),a("code",[t._v("elements")]),t._v(" 对象中，会按照顺序存放排序属性。"),a("code",[t._v("properties")]),t._v(" 属性则指向了 "),a("code",[t._v("properties")]),t._v(" 对象，在 "),a("code",[t._v("properties")]),t._v(" 对象中，会按照创建时的顺序保存常规属性。")]),t._v(" "),a("p",[t._v("通过引入这两个属性，加速了 V8 查找属性的速度，为了更加进一步提升查找效率，V8 还实现了内置内属性的策略，当常规属性少于一定数量时，V8 就会将这些常规属性直接写进对象中，这样又节省了一个中间步骤。")]),t._v(" "),a("p",[t._v("但是如果对象中的属性过多时，或者存在反复添加或者删除属性的操作，那么 V8 就会将线性的存储模式降级为非线性的字典存储模式，这样虽然降低了查找速度，但是却提升了修改对象的属性的速度。")]),t._v(" "),a("h3",{attrs:{id:"拓展阅读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#拓展阅读"}},[t._v("#")]),t._v(" 拓展阅读")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/chargeworld/p/12236848.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("V8 是怎么跑起来的 —— V8 中的对象表示"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://v8.dev/blog/fast-properties",target:"_blank",rel:"noopener noreferrer"}},[t._v("v8快属性慢属性"),a("OutboundLink")],1)])]),t._v(" "),a("h3",{attrs:{id:"优质问答区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优质问答区"}},[t._v("#")]),t._v(" 优质问答区")]),t._v(" "),a("p",[a("strong",[t._v("1、通常，我们不建议使用 delete 来删除属性，原因是什么？")])]),t._v(" "),a("p",[t._v("delete操作，在删除线性结构会有移动其他元素的耗时，如果删除的属性个数是介于对象内属性和常规属性properties之间，会触发结构调整，而且非线性结构查询也耗时")])])}),[],!1,null,null,null);s.default=n.exports}}]);