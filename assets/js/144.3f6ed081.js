(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{575:function(t,s,e){"use strict";e.r(s);var n=e(11),r=Object(n.a)({},(function(){var t=this.$createElement,s=this._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("h1",{attrs:{id:"桥梁模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#桥梁模式"}},[this._v("#")]),this._v(" 桥梁模式")]),this._v(" "),s("p",[this._v("将抽象化与实现化脱耦，使得二者可以独立的变化，也就是说将他们之间的强关联变成弱关联，也就是指在一个软件系统的抽象化和实现化之间使用组合 / 聚合关系而不是继承关系，从而使两者可以独立的变化。")])])}),[],!1,null,null,null);s.default=r.exports}}]);