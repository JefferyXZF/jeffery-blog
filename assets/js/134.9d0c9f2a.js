(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{564:function(a,t,s){"use strict";s.r(t);var e=s(11),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"原型链：v8是如何实现对象继承的？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型链：v8是如何实现对象继承的？"}},[a._v("#")]),a._v(" 原型链：V8是如何实现对象继承的？")]),a._v(" "),s("h3",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),s("p",[s("strong",[a._v("继承就是一个对象可以访问另外一个对象中的属性和方法")]),a._v("，比如有一个 B 对象，该对象继承了 A 对象，那么 B 对象便可以直接访问 A 对象中的属性和方法，如下图：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/c91e103f535679a4f6901d0b4ff8cb7b.jpg",alt:"img"}})]),a._v(" "),s("p",[a._v("观察上图，因为 B 继承了 A，那么 B 可以直接使用 A 中的 color 属性，就像这个属性是 B 自带的一样。")]),a._v(" "),s("p",[a._v("不同的语言实现继承的方式是不同的，其中最典型的两种方式是"),s("strong",[a._v("基于类的设计")]),a._v("和"),s("strong",[a._v("基于原型继承的设计")]),a._v("。")]),a._v(" "),s("p",[a._v("C++、Java、C# 这些语言都是基于经典的类继承的设计模式，这种模式最大的特点就是提供了非常复杂的规则，并提供了非常多的关键字，诸如 "),s("code",[a._v("class")]),a._v("、"),s("code",[a._v("friend")]),a._v("、"),s("code",[a._v("protected")]),a._v("、"),s("code",[a._v("private")]),a._v("、"),s("code",[a._v("interface")]),a._v(" 等，通过组合使用这些关键字，就可以实现继承。")]),a._v(" "),s("p",[a._v("使用基于类的继承时，如果业务复杂，那么你需要创建大量的对象，然后需要维护非常复杂的继承关系，这会导致代码过度复杂和臃肿，另外引入了这么多关键字也给设计带来了更大的复杂度。")]),a._v(" "),s("p",[a._v("而 "),s("code",[a._v("JavaScript")]),a._v(" 的继承方式和其他面向对象的继承方式有着很大差别，"),s("code",[a._v("JavaScript")]),a._v(" 本身不提供一个 "),s("code",[a._v("class")]),a._v(" 实现。虽然标准委员会在 ES2015/ES6 中引入了 "),s("code",[a._v("class")]),a._v(" 关键字，但那只是语法糖，"),s("code",[a._v("JavaScript")]),a._v(" 的继承依然和基于类的继承没有一点关系。所以当你看到 "),s("code",[a._v("JavaScript")]),a._v(" 出现了 "),s("code",[a._v("class")]),a._v(" 关键字时，不要以为 "),s("code",[a._v("JavaScript")]),a._v(" 也是面向对象语言了。")]),a._v(" "),s("p",[s("code",[a._v("JavaScript")]),a._v(" 仅仅在对象中引入了一个原型的属性，就实现了语言的继承机制，基于原型的继承省去了很多基于类继承时的繁文缛节，简洁而优美。")]),a._v(" "),s("h3",{attrs:{id:"原型继承是如何实现的？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原型继承是如何实现的？"}},[a._v("#")]),a._v(" 原型继承是如何实现的？")]),a._v(" "),s("p",[a._v("那么，基于原型继承是如何实现的呢？我们参看下图：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/687740eecf5aad32403cc00a751233ca.jpg",alt:"img"}})]),a._v(" "),s("p",[a._v("有一个对象 C，它包含了一个属性 "),s("code",[a._v("type")]),a._v("，那么对象 C 是可以直接访问它自己的属性 "),s("code",[a._v("type")]),a._v(" 的，这点毫无疑问。")]),a._v(" "),s("p",[a._v("怎样让 C 对象像访问自己的属性一样，访问 B 对象呢？")]),a._v(" "),s("p",[a._v("JavaScript 的每个对象都包含了一个隐藏属性 "),s("code",[a._v("__proto__")]),a._v(" ，该隐藏属性 "),s("code",[a._v("__proto__")]),a._v(" 称之为该对象的原型 (prototype)，"),s("code",[a._v("__proto__")]),a._v(" 指向了内存中的另外一个对象，这个对象称为该对象的原型对象，那么该对象就可以直接访问其原型对象的方法或者属性。")]),a._v(" "),s("p",[a._v("比如我让 C 对象的原型指向 B 对象，那么便可以利用 C 对象来直接访问 B 对象中的属性或者方法了，最终的效果如下图所示：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/6e0edf92883d97be06a94dc5431967ac.jpg",alt:"img"}})]),a._v(" "),s("p",[a._v("观察上图，当 C 对象将它的 "),s("code",[a._v("__proto__")]),a._v(" 属性指向了 B 对象后，那么通过对象 C 来访问对象 B 中的 "),s("code",[a._v("name")]),a._v(" 属性时，V8 会先从对象 C 中查找，但是并没有查找到，接下来 V8 继续在其原型对象 B 中查找，因为对象 B 中包含了 "),s("code",[a._v("name")]),a._v(" 属性，那么 V8 就直接返回对象 B 中的 "),s("code",[a._v("name")]),a._v(" 属性值，虽然 C 和 B 是两个不同的对象，但是使用的时候，B 的属性看上去就像是 C 的属性一样。")]),a._v(" "),s("p",[a._v("同样的方式，B 也是一个对象，它也有自己的 "),s("code",[a._v("__proto__")]),a._v(" 属性，比如它的属性指向了内存中另外一块对象 A，如下图所示：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/63bd704eb45646e2f46af426196a3d88.jpg",alt:"img"}})]),a._v(" "),s("p",[a._v("从图中可以看到，对象 A 有个属性是 "),s("code",[a._v("color")]),a._v("，那么通过 "),s("code",[a._v("C.color")]),a._v(" 访问 "),s("code",[a._v("color")]),a._v(" 属性时，V8 会先在 C 对象内部查找，但是没有查找到，接着继续在 C 对象的原型对象 B 中查找，但是依然没有查找到，那么继续去对象 B 的原型对象 A 中查找，因为 "),s("code",[a._v("color")]),a._v(" 在对象 A 中，那么 V8 就返回该属性值。")]),a._v(" "),s("p",[a._v("我们看到使用 "),s("code",[a._v("C.name")]),a._v(" 和"),s("code",[a._v("C.color")]),a._v(" 时，给人的感觉属性 "),s("code",[a._v("name")]),a._v(" 和 "),s("code",[a._v("color")]),a._v(" 都是对象 C 本身的属性，但实际上这些属性都是位于原型对象上，我们把这个查找属性的路径称为"),s("strong",[a._v("原型链")]),a._v("，它像一个链条一样，将几个原型链接了起来。")]),a._v(" "),s("p",[a._v("在这里还要注意一点，不要将原型链接和作用域链搞混淆了，"),s("strong",[a._v("作用域链是沿着函数的作用域一级一级来查找变量的，而原型链是沿着对象的原型一级一级来查找属性的")]),a._v("，虽然它们的实现方式是类似的，但是它们的用途是不同的")]),a._v(" "),s("p",[a._v("关于继承，还有一种情况，如果我有另外一个对象 D，它可以和 C 共同拥有同一个原型对象 B，如下图所示：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/44a91019e752ae2e7d6b709562d2554a.jpg",alt:"img"}})]),a._v(" "),s("p",[a._v("因为对象 C 和对象 D 的原型都指向了对象 B，所以它们共同拥有同一个原型对象，当我通过 D 去访问 "),s("code",[a._v("name")]),a._v(" 属性或者 "),s("code",[a._v("color")]),a._v(" 属性时，返回的值和使用对象 C 访问 "),s("code",[a._v("name")]),a._v(" 属性和 "),s("code",[a._v("color")]),a._v(" 属性是一样的，因为它们是同一个数据。")]),a._v(" "),s("p",[a._v("继承的概念："),s("strong",[a._v("继承就是一个对象可以访问另外一个对象中的属性和方法，在JavaScript 中，我们通过原型和原型链的方式来实现了继承特性。")])]),a._v(" "),s("p",[a._v("通过上面的分析，你可以看到在 "),s("code",[a._v("JavaScript")]),a._v(" 中的继承非常简洁，就是每个对象都有一个原型属性，该属性指向了原型对象，查找属性的时候，"),s("code",[a._v("JavaScript")]),a._v(" 虚拟机会沿着原型一层一层向上查找，直至找到正确的属性。所以对于 "),s("code",[a._v("JavaScript")]),a._v(" 中的原型继承，不需要把它想得过度复杂。")]),a._v(" "),s("h3",{attrs:{id:"实践：利用-proto-实现继承"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实践：利用-proto-实现继承"}},[a._v("#")]),a._v(" 实践：利用 "),s("strong",[a._v("proto")]),a._v(" 实现继承")]),a._v(" "),s("p",[a._v("了解了 "),s("code",[a._v("JavaScript")]),a._v(" 中的原型和原型链继承之后，下面我们就可以通过一个例子，看看原型是怎么应用在 "),s("code",[a._v("JavaScript")]),a._v(" 中的，可以先看下面这段代码：")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" animal "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    type"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Default"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    color"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Default"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[a._v("getInfo")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("Type is: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("${")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("type"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("，color is ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("${")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("color"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[a._v("`")])]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" dog "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    type"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Dog"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    color"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Black"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br"),s("span",{staticClass:"line-number"},[a._v("11")]),s("br")])]),s("p",[a._v("在这段代码中，我创建了两个对象 "),s("code",[a._v("animal")]),a._v(" 和 "),s("code",[a._v("dog")]),a._v("，想让 "),s("code",[a._v("dog")]),a._v(" 对象继承于 "),s("code",[a._v("animal")]),a._v(" 对象，那么最直接的方式就是将 "),s("code",[a._v("dog")]),a._v(" 的原型指向对象 "),s("code",[a._v("animal")]),a._v("，应该怎么操作呢？")]),a._v(" "),s("p",[a._v("我们可以通过设置 dog 对象中的 "),s("code",[a._v("__proto__")]),a._v(" 属性，将其指向 animal，代码是这样的：")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("dog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("__proto__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" animal\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("设置之后，我们就可以使用 "),s("code",[a._v("dog")]),a._v(" 来调用 "),s("code",[a._v("animal")]),a._v(" 中的 "),s("code",[a._v("getInfo")]),a._v(" 方法了。")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("dog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getInfo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("还有一点我们要注意，通常隐藏属性是不能使用 "),s("code",[a._v("JavaScript")]),a._v(" 来直接与之交互的。虽然现代浏览器都开了一个口子，让 "),s("code",[a._v("JavaScript")]),a._v(" 可以访问隐藏属性 "),s("code",[a._v("_proto_")]),a._v("，但是在实际项目中，我们不应该直接通过 "),s("code",[a._v("_proto_")]),a._v(" 来访问或者修改该属性，其主要原因有两个：")]),a._v(" "),s("ul",[s("li",[a._v("首先，这是隐藏属性，并不是标准定义的 ;")]),a._v(" "),s("li",[a._v("其次，使用该属性会造成严重的性能问题。")])]),a._v(" "),s("p",[a._v("准确的做法是使用 "),s("code",[a._v("Object.setPrototypeOf")]),a._v(" 设置原型对象")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("Object"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("setPrototypeOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("dog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" animal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"构造函数是怎么创建对象的？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数是怎么创建对象的？"}},[a._v("#")]),a._v(" 构造函数是怎么创建对象的？")]),a._v(" "),s("p",[a._v("比如我们要创建一个 "),s("code",[a._v("dog")]),a._v(" 对象，我可以先创建一个 "),s("code",[a._v("DogFactory")]),a._v(" 的函数，属性通过参数进行传递，在函数体内，通过 "),s("code",[a._v("this")]),a._v(" 设置属性值。代码如下所示：")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("DogFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("color")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" type\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("color "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" color\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br")])]),s("p",[a._v("然后再结合关键字“new”就可以创建对象了，创建对象的代码如下所示：")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" dog "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DogFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Dog'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Black'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("其实当 V8 执行上面这段代码时，V8 会在背后悄悄地做了以下几件事情，模拟代码如下所示：")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" dog "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("  \ndog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("__proto__ "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DogFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("prototype\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("DogFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("dog"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Dog'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Black'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("上面这段代码的执行流程图：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/19c63a16ec6b6bb67f0a7e74b284398c.jpg",alt:"img"}})]),a._v(" "),s("p",[a._v("观察上图，我们可以看到执行流程分为三步：")]),a._v(" "),s("ul",[s("li",[a._v("首先，创建了一个空白对象 "),s("code",[a._v("dog")]),a._v("；")]),a._v(" "),s("li",[a._v("然后，将 "),s("code",[a._v("DogFactory")]),a._v(" 的 "),s("code",[a._v("prototype")]),a._v(" 属性设置为 "),s("code",[a._v("dog")]),a._v(" 的原型对象；")]),a._v(" "),s("li",[a._v("最后，再使用 "),s("code",[a._v("dog")]),a._v(" 来调用 "),s("code",[a._v("DogFactory")]),a._v("，这时候 "),s("code",[a._v("DogFactory")]),a._v(" 函数中的 "),s("code",[a._v("this")]),a._v(" 就指向了对象 "),s("code",[a._v("dog")]),a._v("，然后在 "),s("code",[a._v("DogFactory")]),a._v(" 函数中，利用 "),s("code",[a._v("this")]),a._v(" 对对象 "),s("code",[a._v("dog")]),a._v(" 执行属性填充操作，最终就创建了对象 "),s("code",[a._v("dog")]),a._v("。")])]),a._v(" "),s("h3",{attrs:{id:"构造函数怎么实现继承？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#构造函数怎么实现继承？"}},[a._v("#")]),a._v(" 构造函数怎么实现继承？")]),a._v(" "),s("p",[a._v("可以通过构造函数来创建对象了，接下来我们就看看构造函数是如何实现继承的？可以先看下面这段代码：")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("DogFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("color")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" type\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("color "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" color\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//Mammalia")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//恒温")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("constant_temperature "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" dog1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DogFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Dog'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Black'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" dog2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DogFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Dog'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Black'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" dog3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DogFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Dog'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Black'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("p",[a._v("利用上面这段代码创建了三个 dog 对象，每个对象都占用了一块空间，占用空间示意图如下所示：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/9aff57c8992de8b11b70439797a3862b.jpg",alt:"img"}})]),a._v(" "),s("p",[a._v("从图中可以看出来，对象 dog1 到 dog3 中的 "),s("code",[a._v("constant_temperature")]),a._v(" 属性都占用了一块空间，但是这是一个通用的属性，表示所有的 dog 对象都是恒温动物，所以没有必要在每个对象中都为该属性分配一块空间，我们可以将该属性设置公用的。")]),a._v(" "),s("p",[a._v("怎么设置呢？")]),a._v(" "),s("p",[a._v("还记得我们介绍函数时提到关于函数有两个隐藏属性吗？这两个隐藏属性就是 "),s("code",[a._v("name")]),a._v(" 和 "),s("code",[a._v("code")]),a._v("，其实函数还有另外一个隐藏属性，那就是 "),s("code",[a._v("prototype")]),a._v("，刚才介绍构造函数时我们也提到过。一个函数有以下几个隐藏属性：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/javascript/ec19366c204bcc0b30b9b46448cbbee7.jpg",alt:"img"}})]),a._v(" "),s("p",[a._v("每个函数对象中都有一个公开的 "),s("code",[a._v("prototype")]),a._v(" 属性，当你将这个函数作为构造函数来创建一个新的对象时，新创建对象的原型对象就指向了该函数的 "),s("code",[a._v("prototype")]),a._v(" 属性。当然了，如果你只是正常调用该函数，那么 "),s("code",[a._v("prototype")]),a._v(" 属性将不起作用。")]),a._v(" "),s("p",[a._v("现在我们知道了新对象的原型对象指向了构造函数的 "),s("code",[a._v("prototype")]),a._v(" 属性，当你通过一个构造函数创建多个对象的时候，这几个对象的原型都指向了该函数的 "),s("code",[a._v("prototype 属性")]),a._v("，如下图所示：")]),a._v(" "),s("p",[s("img",{attrs:{src:"https://gitee.com/FIF/pic-beg/raw/master/images/vue/1d5e7c1f7006974aec657e8a3e9e864d.jpg",alt:"img"}})]),a._v(" "),s("p",[a._v("例如将 "),s("code",[a._v("constant_temperature")]),a._v(" 属性添加到 "),s("code",[a._v("DogFactory")]),a._v(" 的 "),s("code",[a._v("prototype")]),a._v(" 属性上，代码如下所示：")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("DogFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("color")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" type\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("color "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" color\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//Mammalia")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\nDogFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v(" prototype"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("constant_temperature "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" dog1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DogFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Dog'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Black'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" dog2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DogFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Dog'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Black'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" dog3 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("DogFactory")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Dog'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v("'Black'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br"),s("span",{staticClass:"line-number"},[a._v("8")]),s("br"),s("span",{staticClass:"line-number"},[a._v("9")]),s("br"),s("span",{staticClass:"line-number"},[a._v("10")]),s("br")])]),s("p",[a._v("这样我们三个 "),s("code",[a._v("dog")]),a._v(" 对象的原型对象都指向了"),s("code",[a._v("prototype")]),a._v("，而 "),s("code",[a._v("prototype")]),a._v(" 又包含了 "),s("code",[a._v("constant_temperature")]),a._v(" 属性，这就是我们实现继承的正确方式。")]),a._v(" "),s("h3",{attrs:{id:"一段关于-new-的历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一段关于-new-的历史"}},[a._v("#")]),a._v(" 一段关于 new 的历史")]),a._v(" "),s("p",[a._v("现在我们知道 "),s("code",[a._v("new")]),a._v(" 关键字结合构造函数，就能生成一个对象，不过这种方式很怪异，为什么要这样呢？要了解这背后的原因，我们需要了解一段关于关于 "),s("code",[a._v("JavaScript")]),a._v(" 的历史。")]),a._v(" "),s("p",[s("code",[a._v("JavaScript")]),a._v(" 是 Brendan Eich 发明的，那是个“战乱”的时代，各种大公司相互争霸，有 Sun、微软、网景、甲骨文等公司，它们都有推出自己的语言，其中最炙手可热的编程语言是 Sun 的 "),s("code",[a._v("Java")]),a._v("，而 "),s("code",[a._v("JavaScript")]),a._v(" 就是这个时候诞生的。当时创造 "),s("code",[a._v("JavaScript")]),a._v(" 的目的仅仅是为了让浏览器页面可以动起来，所以尽可能采用简化的方式来设计 "),s("code",[a._v("JavaScript")]),a._v("，所以本质上来说，"),s("code",[a._v("Java")]),a._v(" 和 "),s("code",[a._v("JavaScript")]),a._v(" 的关系就像雷锋和雷峰塔的关系。")]),a._v(" "),s("p",[a._v("那么之所以叫 "),s("code",[a._v("JavaScript")]),a._v(" 是出于市场原因考量的，因为一门新的语言需要吸引新的开发者，而当时最大的开发者群体就是 "),s("code",[a._v("Java")]),a._v("，于是 "),s("code",[a._v("JavaScript")]),a._v(" 就蹭了 "),s("code",[a._v("Java")]),a._v(" 的热度，事后，这一招被证明的确有效果。")]),a._v(" "),s("p",[a._v("虽然叫 "),s("code",[a._v("JavaScript")]),a._v("，但是其编程方式和 "),s("code",[a._v("Java")]),a._v(" 比起来，依然存在着非常大的差异，其中 "),s("code",[a._v("Java")]),a._v(" 中使用最频繁的代码就是创建一个对象，如下所示：")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("CreateInstance instance "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("CreateInstance")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("当时 "),s("code",[a._v("JavaScript")]),a._v(" 并没有使用这种方式来创建对象，因为 "),s("code",[a._v("JavaScript")]),a._v(" 中的对象和 "),s("code",[a._v("Java")]),a._v(" 中的对象是完全不一样的，因此，完全没有必要使用关键字 "),s("code",[a._v("new")]),a._v(" 来创建一个新对象的，但是为了进一步吸引 "),s("code",[a._v("Java")]),a._v(" 程序员，依然需要在语法层面去蹭 "),s("code",[a._v("Java")]),a._v(" 热点，所以 "),s("code",[a._v("JavaScript")]),a._v(" 中就被硬生生地强制加入了非常不协调的关键字 "),s("code",[a._v("new")]),a._v("，然后使用 "),s("code",[a._v("new")]),a._v(" 来创造对象就变成这样了：")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("var")]),a._v(" bar "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("code",[a._v("Java")]),a._v(" 程序员看到这段代码时，当然会感到倍感亲切，觉得 "),s("code",[a._v("Java")]),a._v(" 和 "),s("code",[a._v("JavaScript")]),a._v(" 非常相似，那么使用 "),s("code",[a._v("JavaScript")]),a._v(" 也就天经地义了。不过代码形式只是表象，其背后原理是完全不同的。")]),a._v(" "),s("h3",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),s("p",[s("code",[a._v("JavaScript")]),a._v(" 中的继承机制，涉及到了原型继承机制，虽然基于原型的继承机制本身比较简单，但是在 "),s("code",[a._v("JavaScript")]),a._v(" 中，这是通过关键字 "),s("code",[a._v("new")]),a._v(" 加上构造函数来体现的。")]),a._v(" "),s("p",[a._v("通过每个对象中都有的隐含属性 "),s("code",[a._v("__proto__")]),a._v("，来介绍了什么是原型和原型链。V8 为每个对象都设置了一个 "),s("code",[a._v("__proto__")]),a._v(" 属性，该属性直接指向了该对象的原型对象，原型对象也有自己的 "),s("code",[a._v("__proto__")]),a._v(" 属性，这些属性串连在一起就成了原型链。")]),a._v(" "),s("p",[a._v("不过在 "),s("code",[a._v("JavaScript")]),a._v(" 中，并不建议直接使用 "),s("code",[a._v("__proto__")]),a._v(" 属性，主要有两个原因。")]),a._v(" "),s("ul",[s("li",[a._v("一，这是隐藏属性，并不是标准定义的；")]),a._v(" "),s("li",[a._v("二，使用该属性会造成严重的性能问题。")])]),a._v(" "),s("p",[a._v("所以，在 "),s("code",[a._v("JavaScript")]),a._v(" 中，是使用 "),s("code",[a._v("new")]),a._v(" 加上构造函数的这种组合来创建对象和实现对象的继承。不过使用这种方式隐含的语义过于隐晦，所以理解起来有点难度。")]),a._v(" "),s("p",[a._v("为什么 "),s("code",[a._v("JavaScript")]),a._v(" 中要使用这种怪异的方式来创建对象？为了理解这个问题，我们回顾了一段 "),s("code",[a._v("JavaScript")]),a._v(" 的历史。由于当前的 "),s("code",[a._v("Java")]),a._v(" 非常流行，基于市场推广的考虑，"),s("code",[a._v("JavaScript")]),a._v(" 采取了蹭 "),s("code",[a._v("Java")]),a._v(" 热度的策略，在语言命名上使用了 "),s("code",[a._v("Java")]),a._v(" 字样，在语法形式上也模仿了 "),s("code",[a._v("Java")]),a._v("。事实上通过这些策略，确实为 "),s("code",[a._v("JavaScript")]),a._v(" 带来了市场上的成功。不过你依然要记住，"),s("code",[a._v("JavaScript")]),a._v(" 和 "),s("code",[a._v("Java")]),a._v(" 是完全两种不同的语言。")]),a._v(" "),s("h3",{attrs:{id:"拖拽阅读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拖拽阅读"}},[a._v("#")]),a._v(" 拖拽阅读")]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.cn/post/6844903837623386126",target:"_blank",rel:"noopener noreferrer"}},[a._v("用自己的方式（图）理解constructor、prototype、__proto__和原型链"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.cn/post/6844903780035592205",target:"_blank",rel:"noopener noreferrer"}},[a._v("面试官问：JS的继承"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);